    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgSpesialis.java
 *
 * Created on May 23, 2010, 1:25:13 AM
 */

package bridging;
import bridging.BPJSApi;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import static com.sun.org.glassfish.external.amx.AMXUtil.prop;
import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author dosen
 */
public class DlgVerifikasiKodeBoking extends javax.swing.JDialog {
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private int x = 0, cekDaftar = 0, cekSEP = 0;
    private PreparedStatement psCekBooking, psCekPasien, pspasien, psCek;
    private ResultSet rsCekBooking, rsCekPasien, rspasien, rsCek;
    private boolean bool = false;
    private SimpleDateFormat dateformat = new SimpleDateFormat("yyyy/MM/dd");
    private final Properties prop = new Properties();
    private BPJSApi api = new BPJSApi();
    private String tglCekbpjs = "", cekStatusCetak = "", normbpjs = "", kdpolibpjs = "", kdpenjabbpjs = "", kddokterbpjs = "",
            umur = "", sttsumur = "", kddpjpLayan = "", nmdpjpLayan = "", tujuanKun = "", flagPro = "", asses = "", pembi = "",
            kdpenunjang = "", pJawab = "", klsHAK = "", tujuanKunKirim = "", NoRujukan = "", kdppkrujuk = "", nmppkrujukan = "",
            kdppk = "", nmppk = "", jenpel = "", Catatan = "", KdPenyakit = "", nmdiagnosa = "", kdpoliSEP = "", nmpoliSEP = "",
            usernya = "", nmpasienSEP = "", TglLahir = "", JenisPeserta = "", JK = "", NoKartu = "", NoTelp = "", tglkll = "", Ket = "",
            NoSEPSuplesi = "", KdProv = "", NmProv = "", KdKab = "", NmKab = "", KdKec = "", NmKec = "", noSurat = "", Kddpjp = "",
            NmDPJP = "", nmrujukan = "", kode_rujukanya = "", kdppkrujukSEP = "", URUTNOREGbpjs = "", kdPengajuan = "", kdAproval = "",
            utc = "", URL = "", requestJson, respons = "", LokasiLaka = "";

    /** Creates new form DlgSpesialis
     * @param parent
     * @param modal */
    public DlgVerifikasiKodeBoking(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tglPeriksaBPJS = new widget.Tanggal();
        tglrujukanbpjs = new widget.Tanggal();
        Kelas = new widget.ComboBox();
        LakaLantas = new widget.ComboBox();
        AsalRujukan = new widget.ComboBox();
        Eksekutif = new widget.ComboBox();
        COB = new widget.ComboBox();
        KasusKatarak = new widget.ComboBox();
        suplesi = new widget.ComboBox();
        TNoRegBPJS = new widget.TextBox();
        norwBokingBPJS = new widget.TextBox();
        TanggalSEP = new widget.Tanggal();
        internalFrame1 = new widget.InternalFrame();
        panelGlass1 = new widget.panelisi();
        jLabel35 = new widget.Label();
        kdbokingbpjs = new widget.TextBox();
        BtnCekKode = new widget.Button();
        jLabel36 = new widget.Label();
        nmpasienbpjs = new widget.TextBox();
        jLabel37 = new widget.Label();
        tglperiksabpjs = new widget.TextBox();
        jLabel38 = new widget.Label();
        politujuanbpjs = new widget.TextBox();
        jLabel39 = new widget.Label();
        nmdokterbpjs = new widget.TextBox();
        jPanel1 = new javax.swing.JPanel();
        BtnSimpan = new widget.Button();
        BtnKeluar = new widget.Button();

        tglPeriksaBPJS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "22-11-2023" }));
        tglPeriksaBPJS.setDisplayFormat("dd-MM-yyyy");
        tglPeriksaBPJS.setName("tglPeriksaBPJS"); // NOI18N
        tglPeriksaBPJS.setOpaque(false);
        tglPeriksaBPJS.setPreferredSize(new java.awt.Dimension(90, 23));

        tglrujukanbpjs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "22-11-2023" }));
        tglrujukanbpjs.setDisplayFormat("dd-MM-yyyy");
        tglrujukanbpjs.setName("tglrujukanbpjs"); // NOI18N
        tglrujukanbpjs.setOpaque(false);
        tglrujukanbpjs.setPreferredSize(new java.awt.Dimension(90, 23));

        Kelas.setForeground(new java.awt.Color(0, 0, 0));
        Kelas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. Kelas 1", "2. Kelas 2", "3. Kelas 3" }));
        Kelas.setName("Kelas"); // NOI18N

        LakaLantas.setForeground(new java.awt.Color(0, 0, 0));
        LakaLantas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0. Bukan Kecelakaan lalu lintas [BKLL]", "1. KLL dan Bukan Kecelakaan Kerja [BKK]", "2. KLL dan KK", "3. KK" }));
        LakaLantas.setName("LakaLantas"); // NOI18N

        AsalRujukan.setForeground(new java.awt.Color(0, 0, 0));
        AsalRujukan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. Faskes 1", "2. Faskes 2(RS)" }));
        AsalRujukan.setName("AsalRujukan"); // NOI18N

        Eksekutif.setForeground(new java.awt.Color(0, 0, 0));
        Eksekutif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0. Tidak", "1.Ya" }));
        Eksekutif.setName("Eksekutif"); // NOI18N

        COB.setForeground(new java.awt.Color(0, 0, 0));
        COB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0. Tidak ", "1.Ya" }));
        COB.setName("COB"); // NOI18N

        KasusKatarak.setForeground(new java.awt.Color(0, 0, 0));
        KasusKatarak.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0. Tidak", "1. Ya" }));
        KasusKatarak.setName("KasusKatarak"); // NOI18N

        suplesi.setForeground(new java.awt.Color(0, 0, 0));
        suplesi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0. Tidak", "1. Ya" }));
        suplesi.setName("suplesi"); // NOI18N

        TNoRegBPJS.setHighlighter(null);
        TNoRegBPJS.setName("TNoRegBPJS"); // NOI18N

        norwBokingBPJS.setHighlighter(null);
        norwBokingBPJS.setName("norwBokingBPJS"); // NOI18N

        TanggalSEP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "22-11-2023" }));
        TanggalSEP.setDisplayFormat("dd-MM-yyyy");
        TanggalSEP.setName("TanggalSEP"); // NOI18N
        TanggalSEP.setOpaque(false);
        TanggalSEP.setPreferredSize(new java.awt.Dimension(90, 23));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255), 3), "::[ Verifikasi Kode Booking Pasien BPJS ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        panelGlass1.setName("panelGlass1"); // NOI18N
        panelGlass1.setPreferredSize(new java.awt.Dimension(44, 80));
        panelGlass1.setLayout(null);

        jLabel35.setForeground(new java.awt.Color(0, 0, 0));
        jLabel35.setText("Kode Booking : ");
        jLabel35.setName("jLabel35"); // NOI18N
        panelGlass1.add(jLabel35);
        jLabel35.setBounds(0, 10, 100, 23);

        kdbokingbpjs.setForeground(new java.awt.Color(0, 0, 0));
        kdbokingbpjs.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        kdbokingbpjs.setName("kdbokingbpjs"); // NOI18N
        kdbokingbpjs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kdbokingbpjsKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                kdbokingbpjsKeyTyped(evt);
            }
        });
        panelGlass1.add(kdbokingbpjs);
        kdbokingbpjs.setBounds(100, 10, 190, 23);

        BtnCekKode.setForeground(new java.awt.Color(0, 0, 0));
        BtnCekKode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnCekKode.setMnemonic('C');
        BtnCekKode.setText("Cek");
        BtnCekKode.setToolTipText("Alt+C");
        BtnCekKode.setName("BtnCekKode"); // NOI18N
        BtnCekKode.setPreferredSize(new java.awt.Dimension(120, 30));
        BtnCekKode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCekKodeActionPerformed(evt);
            }
        });
        panelGlass1.add(BtnCekKode);
        BtnCekKode.setBounds(295, 10, 70, 23);

        jLabel36.setForeground(new java.awt.Color(0, 0, 0));
        jLabel36.setText("Nama Pasien : ");
        jLabel36.setName("jLabel36"); // NOI18N
        panelGlass1.add(jLabel36);
        jLabel36.setBounds(0, 38, 100, 23);

        nmpasienbpjs.setEditable(false);
        nmpasienbpjs.setForeground(new java.awt.Color(0, 0, 0));
        nmpasienbpjs.setName("nmpasienbpjs"); // NOI18N
        panelGlass1.add(nmpasienbpjs);
        nmpasienbpjs.setBounds(100, 38, 320, 23);

        jLabel37.setForeground(new java.awt.Color(0, 0, 0));
        jLabel37.setText("Tgl. Periksa : ");
        jLabel37.setName("jLabel37"); // NOI18N
        panelGlass1.add(jLabel37);
        jLabel37.setBounds(0, 66, 100, 23);

        tglperiksabpjs.setEditable(false);
        tglperiksabpjs.setForeground(new java.awt.Color(0, 0, 0));
        tglperiksabpjs.setName("tglperiksabpjs"); // NOI18N
        panelGlass1.add(tglperiksabpjs);
        tglperiksabpjs.setBounds(100, 66, 160, 23);

        jLabel38.setForeground(new java.awt.Color(0, 0, 0));
        jLabel38.setText("Poliklinik Tujuan : ");
        jLabel38.setName("jLabel38"); // NOI18N
        panelGlass1.add(jLabel38);
        jLabel38.setBounds(0, 94, 100, 23);

        politujuanbpjs.setEditable(false);
        politujuanbpjs.setForeground(new java.awt.Color(0, 0, 0));
        politujuanbpjs.setName("politujuanbpjs"); // NOI18N
        panelGlass1.add(politujuanbpjs);
        politujuanbpjs.setBounds(100, 94, 320, 23);

        jLabel39.setForeground(new java.awt.Color(0, 0, 0));
        jLabel39.setText("Nama Dokter : ");
        jLabel39.setName("jLabel39"); // NOI18N
        panelGlass1.add(jLabel39);
        jLabel39.setBounds(0, 122, 100, 23);

        nmdokterbpjs.setEditable(false);
        nmdokterbpjs.setForeground(new java.awt.Color(0, 0, 0));
        nmdokterbpjs.setName("nmdokterbpjs"); // NOI18N
        panelGlass1.add(nmdokterbpjs);
        nmdokterbpjs.setBounds(100, 122, 320, 23);

        internalFrame1.add(panelGlass1, java.awt.BorderLayout.CENTER);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(44, 48));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 9, 9));

        BtnSimpan.setForeground(new java.awt.Color(0, 0, 0));
        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        jPanel1.add(BtnSimpan);

        BtnKeluar.setForeground(new java.awt.Color(0, 0, 0));
        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        jPanel1.add(BtnKeluar);

        internalFrame1.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
        cekKodeBokingBPJS();
        emptTeksBokingBPJS();

        if (Sequel.cariInteger("select count(-1) from booking_registrasi where kd_booking ='" + kdbokingbpjs.getText() + "'") > 0) {
            cekStatusCetak = Sequel.cariIsi("select status_cetak_sep from kelengkapan_booking_sep_bpjs where kd_booking='" + kdbokingbpjs.getText() + "'");

            if (tglCekbpjs.equals(Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + ""))) {
                cekPasienBokingBPJS();
//            nomorAutoBPJS();
                umurPasienBPJS();
                cekDaftar = Sequel.cariInteger("SELECT count(1) cek FROM booking_registrasi WHERE kd_booking='" + kdbokingbpjs.getText() + "' and no_rawat<>'-'");

                if (kdpenjabbpjs.equals("B01") || (kdpenjabbpjs.equals("A03"))) {
                    if (cekDaftar > 0 && cekStatusCetak.equals("SUDAH")) {
                        JOptionPane.showMessageDialog(null, "Pasien dg. kode booking " + kdbokingbpjs.getText() + " telah terdaftar pada hari ini & sudah mencetak SEP...!!!");
                        BtnKeluarActionPerformed(null);
                    } else if (cekDaftar == 0 && cekStatusCetak.equals("BELUM")) {
                        cekKelengkapanSEP();
                        if (simpanRegistrasiBPJS() == true) {
                            cekFingerPrin();
                        } else {
                            JOptionPane.showMessageDialog(null, "Registrasi Gagal, Silakan Coba Lagi...!!!");
                        }
                    } else if (cekDaftar == 0 && cekStatusCetak.equals("GAGAL")) {
                        JOptionPane.showMessageDialog(null, "Pasien dg. kode booking " + kdbokingbpjs.getText() + " telah membatalkan proses bookingnya, silakan mendaftar lagi keloket pendaftaran..!!!");
                        BtnKeluarActionPerformed(null);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Menu/fitur ini hanya untuk melayani kode booking pasien BPJS saja...!!");
                    BtnKeluarActionPerformed(null);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Tanggal periksa tidak sama dengan tanggal hari ini...!!");
            }
        }
}//GEN-LAST:event_BtnSimpanActionPerformed

    private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnSimpanActionPerformed(null);
        }
}//GEN-LAST:event_BtnSimpanKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
        emptTeksBokingBPJS();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            dispose();
            emptTeksBokingBPJS();
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void kdbokingbpjsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kdbokingbpjsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCekKodeActionPerformed(null);
        }
    }//GEN-LAST:event_kdbokingbpjsKeyPressed

    private void kdbokingbpjsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kdbokingbpjsKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
    }//GEN-LAST:event_kdbokingbpjsKeyTyped

    private void BtnCekKodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCekKodeActionPerformed
        cekKodeBokingBPJS();
    }//GEN-LAST:event_BtnCekKodeActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgVerifikasiKodeBoking dialog = new DlgVerifikasiKodeBoking(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.ComboBox AsalRujukan;
    private widget.Button BtnCekKode;
    private widget.Button BtnKeluar;
    private widget.Button BtnSimpan;
    private widget.ComboBox COB;
    private widget.ComboBox Eksekutif;
    private widget.ComboBox KasusKatarak;
    private widget.ComboBox Kelas;
    private widget.ComboBox LakaLantas;
    private widget.TextBox TNoRegBPJS;
    private widget.Tanggal TanggalSEP;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel35;
    private widget.Label jLabel36;
    private widget.Label jLabel37;
    private widget.Label jLabel38;
    private widget.Label jLabel39;
    private javax.swing.JPanel jPanel1;
    private widget.TextBox kdbokingbpjs;
    private widget.TextBox nmdokterbpjs;
    private widget.TextBox nmpasienbpjs;
    private widget.TextBox norwBokingBPJS;
    private widget.panelisi panelGlass1;
    private widget.TextBox politujuanbpjs;
    private widget.ComboBox suplesi;
    private widget.Tanggal tglPeriksaBPJS;
    private widget.TextBox tglperiksabpjs;
    private widget.Tanggal tglrujukanbpjs;
    // End of variables declaration//GEN-END:variables

    public void emptTeksBokingBPJS() {
        cekDaftar = 0;
        tglPeriksaBPJS.setDate(new Date());
        tglrujukanbpjs.setDate(new Date());
        Kelas.setSelectedIndex(0);
        LakaLantas.setSelectedIndex(0);
        AsalRujukan.setSelectedIndex(0);
        Eksekutif.setSelectedIndex(0);
        COB.setSelectedIndex(0);
        KasusKatarak.setSelectedIndex(0);
        suplesi.setSelectedIndex(0);
        TNoRegBPJS.setText("");
        norwBokingBPJS.setText("");
        TanggalSEP.setDate(new Date());
    }
    
    private void cekKodeBokingBPJS() {
        try {
            if (kdbokingbpjs.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Kode Booking tidak boleh kosong..!!!");
                kdbokingbpjs.requestFocus();
            } else {
                psCekBooking = koneksi.prepareStatement("select b.kd_booking, DATE_FORMAT(b.tanggal_periksa, '%Y-%m-%d') tglPeriksa,p.nm_pasien,k.nm_poli,d.nm_dokter, "
                        + "b.tanggal_periksa from booking_registrasi b "
                        + "inner join pasien p on p.no_rkm_medis = b.no_rkm_medis "
                        + "inner join poliklinik k on k.kd_poli = b.kd_poli "
                        + "inner join dokter d on d.kd_dokter = b.kd_dokter "
                        + "where b.kd_booking ='" + kdbokingbpjs.getText() + "'");
                rsCekBooking = psCekBooking.executeQuery();

                if (rsCekBooking.next() == true) {
                    tglCekbpjs = rsCekBooking.getString("tglPeriksa");
                    nmpasienbpjs.setText(rsCekBooking.getString("nm_pasien"));
                    tglperiksabpjs.setText(Valid.SetTglINDONESIA(rsCekBooking.getString("tanggal_periksa")));
                    politujuanbpjs.setText(rsCekBooking.getString("nm_poli"));
                    nmdokterbpjs.setText(rsCekBooking.getString("nm_dokter"));
                } else {
                    JOptionPane.showMessageDialog(null, "Kode Booking tidak ditemukan, silakan ulangi lagi...!!");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void cekPasienBokingBPJS() {
        try {
            psCekPasien = koneksi.prepareStatement("select no_rkm_medis,kd_poli,tanggal_periksa,kd_pj,kd_dokter "
                    + "from booking_registrasi where kd_booking='" + kdbokingbpjs.getText() + "'");
            rsCekPasien = psCekPasien.executeQuery();
            while (rsCekPasien.next()) {
                normbpjs = rsCekPasien.getString("no_rkm_medis");
                kdpolibpjs = rsCekPasien.getString("kd_poli");
                Valid.SetTgl(rsCekPasien.getString("tanggal_periksa"));
                kdpenjabbpjs = rsCekPasien.getString("kd_pj");
                kddokterbpjs = rsCekPasien.getString("kd_dokter");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void umurPasienBPJS() {
        try {
            pspasien = koneksi.prepareStatement("select TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()) as tahun, "
                    + "(TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12)) as bulan, "
                    + "TIMESTAMPDIFF(DAY, DATE_ADD(DATE_ADD(tgl_lahir,INTERVAL TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()) YEAR), INTERVAL TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12) MONTH), CURDATE()) as hari from pasien "
                    + "where pasien.no_rkm_medis=?");
            try {
                pspasien.setString(1, normbpjs);
                rspasien = pspasien.executeQuery();
                while (rspasien.next()) {
                    umur = "0";
                    sttsumur = "Th";
                    if (rspasien.getInt("tahun") > 0) {
                        umur = rspasien.getString("tahun");
                        sttsumur = "Th";
                    } else if (rspasien.getInt("tahun") == 0) {
                        if (rspasien.getInt("bulan") > 0) {
                            umur = rspasien.getString("bulan");
                            sttsumur = "Bl";
                        } else if (rspasien.getInt("bulan") == 0) {
                            umur = rspasien.getString("hari");
                            sttsumur = "Hr";
                        }
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex);
            } finally {
                if (rspasien != null) {
                    rspasien.close();
                }

                if (pspasien != null) {
                    pspasien.close();
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private void cekKelengkapanSEP() {
        kddpjpLayan = "";
        nmdpjpLayan = "";
        tujuanKun = "";
        flagPro = "";
        asses = "";
        pembi = "";
        kdpenunjang = "";
        pJawab = "";
        klsHAK = "";
        tujuanKunKirim = "";

        try {
            psCek = koneksi.prepareStatement("select tglrujukan,no_rujukan,kdppkrujukan,nmppkrujukan,kdppkpelayanan,"
                    + "nmppkpelayanan,jnspelayanan,catatan,diagawal,nmdiagnosaawal,kdpolitujuan,nmpolitujuan,"
                    + "IF (klsrawat = '1','1. Kelas 1',IF (klsrawat = '2','2. Kelas 2','3. Kelas 3')) kls_rwt,"
                    + "IF (lakalantas = '0','0. Tidak','1. Ya') kasus_laka,"
                    + "user,nama_pasien,tanggal_lahir,peserta,jkel,no_kartu,asal_rujukan,eksekutif,"
                    + "cob,notelep,katarak,DATE_FORMAT(tglkkl, '%Y-%m-%d') tglkkl,keterangankkl,suplesi,no_sep_suplesi,kdprop,nmprop,kdkab,nmkab,kdkec,nmkec,noskdp,"
                    + "kddpjp,nmdpdjp,rujukan_masuknya, klsRawatHak, dpjpLayan, tujuanKunjungan, flagProcedur, assesmentPel, pembiayaan, kdPenunjang, penanggungJawab, nmdpjpLayan "
                    + "from kelengkapan_booking_sep_bpjs where kd_booking='" + kdbokingbpjs.getText() + "'");
            rsCek = psCek.executeQuery();
            while (rsCek.next()) {
                Valid.SetTgl(tglrujukanbpjs, rsCek.getString("tglrujukan"));
                NoRujukan = rsCek.getString("no_rujukan");
                kdppkrujuk = rsCek.getString("kdppkrujukan");
                nmppkrujukan = rsCek.getString("nmppkrujukan");
                kdppk = rsCek.getString("kdppkpelayanan");
                nmppk = rsCek.getString("nmppkpelayanan");
                jenpel = rsCek.getString("jnspelayanan");
                Catatan = rsCek.getString("catatan");
                KdPenyakit = rsCek.getString("diagawal");
                nmdiagnosa = rsCek.getString("nmdiagnosaawal");
                kdpoliSEP = rsCek.getString("kdpolitujuan");
                nmpoliSEP = rsCek.getString("nmpolitujuan");
                Kelas.setSelectedItem(rsCek.getString("kls_rwt"));
                LakaLantas.setSelectedItem(rsCek.getString("kasus_laka"));
                usernya = rsCek.getString("user");
                nmpasienSEP = rsCek.getString("nama_pasien");
                TglLahir = rsCek.getString("tanggal_lahir");
                JenisPeserta = rsCek.getString("peserta");
                JK = rsCek.getString("jkel");
                NoKartu = rsCek.getString("no_kartu");
                AsalRujukan.setSelectedItem(rsCek.getString("asal_rujukan"));
                Eksekutif.setSelectedItem(rsCek.getString("eksekutif"));
                COB.setSelectedItem(rsCek.getString("cob"));
                NoTelp = rsCek.getString("notelep");
                KasusKatarak.setSelectedItem(rsCek.getString("katarak"));
                tglkll = rsCek.getString("tglkkl");
                Ket = rsCek.getString("keterangankkl");
                suplesi.setSelectedItem(rsCek.getString("suplesi"));
                NoSEPSuplesi = rsCek.getString("no_sep_suplesi");
                KdProv = rsCek.getString("kdprop");
                NmProv = rsCek.getString("nmprop");
                KdKab = rsCek.getString("kdkab");
                NmKab = rsCek.getString("nmkab");
                KdKec = rsCek.getString("kdkec");
                NmKec = rsCek.getString("nmkec");
                noSurat = rsCek.getString("noskdp");
                Kddpjp = rsCek.getString("kddpjp");
                NmDPJP = rsCek.getString("nmdpdjp");
                nmrujukan = rsCek.getString("rujukan_masuknya");

                klsHAK = rsCek.getString("klsRawatHak");
                kddpjpLayan = rsCek.getString("dpjpLayan");
                nmdpjpLayan = rsCek.getString("nmdpjpLayan");
                tujuanKun = rsCek.getString("tujuanKunjungan");
                flagPro = rsCek.getString("flagProcedur");
                asses = rsCek.getString("assesmentPel");
                pembi = rsCek.getString("pembiayaan");
                kdpenunjang = rsCek.getString("kdPenunjang");
                pJawab = rsCek.getString("penanggungJawab");
            }

            if (tujuanKun.equals("0. Normal")) {
                tujuanKunKirim = "0";
            } else if (tujuanKun.equals("1. Prosedur")) {
                tujuanKunKirim = "1";
            } else if (tujuanKun.equals("2. Konsul Dokter")) {
                tujuanKunKirim = "2";
            }

            kode_rujukanya = Sequel.cariIsi("select kd_rujukan from master_nama_rujukan where kode_faskes_bpjs='" + kdppkrujukSEP + "'");
            System.out.println("Berhasil cek data kelengkapan SEP yang akan dikirim ke WS 2.0");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private boolean simpanRegistrasiBPJS() {
        bool = true;
        nomorAutoBPJS();
        if (Sequel.menyimpantf2("reg_periksa", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "No.Rawat", 18,
                new String[]{TNoRegBPJS.getText(), norwBokingBPJS.getText(), Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + ""), Sequel.cariIsi("select time(now())"),
                    kddokterbpjs, normbpjs, kdpoliSEP, "-", "-", "-", 0 + "", "Belum", "Lama", "Ralan", kdpenjabbpjs, umur, sttsumur, usernya}) == true) {

            Sequel.mengedit("booking_registrasi", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_booking='Terdaftar',no_rawat='" + norwBokingBPJS.getText() + "'");
            Sequel.menyimpan("history_user", "Now(),'" + norwBokingBPJS.getText() + "','" + usernya + "','Registrasi Pasien','Simpan'");
            bool = true;
        } else {
            bool = false;
        }
//        Sequel.menyimpantf2("reg_periksa", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "No.Rawat", 18,
//                new String[]{TNoReg.getText(), norwBoking.getText(), Valid.SetTgl(tglPeriksa.getSelectedItem() + ""), CmbJam.getSelectedItem() + ":" + CmbMenit.getSelectedItem() + ":" + CmbDetik.getSelectedItem(),
//                    kddokter.getText(), norm.getText(), kdpoli.getText(), "-", "-", "-", 0 + "", "Belum",
//                    "Lama", "Ralan", kdpenjab.getText(), umur, sttsumur, usernya});
//
//        Sequel.mengedit("booking_registrasi", "kd_booking='" + kodeboking.getText() + "'", "status_booking='Terdaftar',no_rawat='" + norwBoking.getText() + "'");
//        Sequel.menyimpan("history_user", "Now(),'" + norwBoking.getText() + "','" + usernya + "','Registrasi Pasien','Simpan'");
        return bool;
    }
    
    private void nomorAutoBPJS() {
        switch (URUTNOREGbpjs) {
            case "poli":
                Valid.autoNomer3("select ifnull(MAX(CONVERT(no_reg,signed)),0) from reg_periksa where kd_poli='" + kdpolibpjs + "' and tgl_registrasi='" + Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + "") + "'", "", 3, TNoRegBPJS);
                break;
            case "dokter":
                Valid.autoNomer3("select ifnull(MAX(CONVERT(no_reg,signed)),0) from reg_periksa where kd_dokter='" + kddokterbpjs + "' and tgl_registrasi='" + Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + "") + "'", "", 3, TNoRegBPJS);
                break;
            case "dokter & poli":
                Valid.autoNomer3("select ifnull(MAX(CONVERT(no_reg,signed)),0) from reg_periksa where kd_dokter='" + kddokterbpjs + "' and kd_poli='" + kdpolibpjs + "' and tgl_registrasi='" + Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + "") + "'", "", 3, TNoRegBPJS);
                break;
            default:
                Valid.autoNomer3("select ifnull(MAX(CONVERT(no_reg,signed)),0) from reg_periksa where kd_dokter='" + kddokterbpjs + "' and tgl_registrasi='" + Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + "") + "'", "", 3, TNoRegBPJS);
                break;
        }

        Valid.autoNomer3("select ifnull(MAX(CONVERT(RIGHT(no_rawat,6),signed)),0) from reg_periksa where tgl_registrasi='" + Valid.SetTgl(tglPeriksaBPJS.getSelectedItem() + "") + "' ", dateformat.format(tglPeriksaBPJS.getDate()) + "/", 6, norwBokingBPJS);
    }
    
    private void cekFingerPrin() {
        PengajuanFinger();
        AprovalFinger();
        if (kdPengajuan.equals("200") && kdAproval.equals("200")) {
            simpanSEP();
            BtnKeluarActionPerformed(null);
        } else {
            Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
            JOptionPane.showMessageDialog(null, "Proses Pengajuan & Aproval Finger Print ke BPJS gagal..!!!");
        }
    }
    
    private void PengajuanFinger() {
        kdPengajuan = "";
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.add("X-Cons-ID", Sequel.decXML2(prop.getProperty("CONSIDAPIBPJS"), prop.getProperty("KEY")));
            utc = String.valueOf(api.GetUTCdatetimeAsString());
            headers.add("X-Timestamp", utc);
            headers.add("X-Signature", api.getHmac(utc));
            headers.add("user_key", koneksiDB.USERKEYAPIBPJS());
            URL = prop.getProperty("URLAPIBPJS") + "/Sep/pengajuanSEP";

            requestJson = " {"
                    + "\"request\": {"
                    + "\"t_sep\": {"
                    + "\"noKartu\": \"" + NoKartu + "\","
                    + "\"tglSep\": \"" + Valid.SetTgl(TanggalSEP.getSelectedItem() + "") + "\","
                    + "\"jnsPelayanan\": \"" + jenpel + "\","
                    + "\"jnsPengajuan\": \"2\","
                    + "\"keterangan\": \"Pengajuan finger print dari anjungan pasien elektronik\","
                    + "\"user\": \"" + usernya + "\""
                    + "}"
                    + "}"
                    + "}";

            HttpEntity requestEntity = new HttpEntity(requestJson, headers);
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
            JsonNode nameNode = root.path("metaData");
            System.out.println("code : " + nameNode.path("code").asText());
            System.out.println("message : " + nameNode.path("message").asText());
            kdPengajuan = nameNode.path("code").asText();
//                JsonNode response = root.path("response");

            if (nameNode.path("code").asText().equals("200")) {
                Sequel.simpanReplaceInto("bridging_sep_pengajuan",
                        "'" + norwBokingBPJS.getText() + "','"
                        + NoKartu + "','"
                        + Valid.SetTgl(TanggalSEP.getSelectedItem() + "") + "','"
                        + jenpel + "','2','"
                        + "Pengajuan Finger Print','Pengajuan finger print dari anjungan pasien elektronik','"
                        + usernya + "'", "Pengajuan SEP Finger Print");

                System.out.println("Proses mapping selesai, data nomor rawat berhasil dikirim ke SEP (Pengajuan Finger Print)..!!");
            } else {
                Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
                System.out.println("Pesan : " + nameNode.path("message").asText());
            }
        } catch (Exception ex) {
            System.out.println("Notifikasi Bridging : " + ex);
            if (ex.toString().contains("UnknownHostException")) {
                Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
                JOptionPane.showMessageDialog(null, "Koneksi ke server BPJS terputus...!");
            }
        }
    }
    
    private void AprovalFinger() {
        kdAproval = "";
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.add("X-Cons-ID", Sequel.decXML2(prop.getProperty("CONSIDAPIBPJS"), prop.getProperty("KEY")));
            utc = String.valueOf(api.GetUTCdatetimeAsString());
            headers.add("X-Timestamp", utc);
            headers.add("X-Signature", api.getHmac(utc));
            headers.add("user_key", koneksiDB.USERKEYAPIBPJS());
            URL = prop.getProperty("URLAPIBPJS") + "/Sep/aprovalSEP";

            requestJson = "{"
                    + "\"request\": {"
                    + "\"t_sep\": {"
                    + "\"noKartu\": \"" + NoKartu + "\","
                    + "\"tglSep\": \"" + Valid.SetTgl(TanggalSEP.getSelectedItem() + "") + "\","
                    + "\"jnsPelayanan\": \"" + jenpel + "\","
                    + "\"jnsPengajuan\": \"2\","
                    + "\"keterangan\": \"Aproval finger print dari anjungan pasien elektronik\","
                    + "\"user\": \"" + usernya + "\""
                    + "}"
                    + "}"
                    + "}";

            System.out.println("Ini mengirim : " + requestJson);
            HttpEntity requestEntity = new HttpEntity(requestJson, headers);
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
            JsonNode nameNode = root.path("metaData");
            System.out.println("code : " + nameNode.path("code").asText());
            System.out.println("message : " + nameNode.path("message").asText());
            kdAproval = nameNode.path("code").asText();
//                JsonNode response = root.path("response");

            if (nameNode.path("code").asText().equals("200")) {
                Sequel.simpanReplaceInto("bridging_sep_aproval_pengajuan",
                        "'" + norwBokingBPJS.getText() + "','"
                        + NoKartu + "','"
                        + Valid.SetTgl(TanggalSEP.getSelectedItem() + "") + "','"
                        + jenpel + "','Aproval finger print dari anjungan pasien elektronik','"
                        + usernya + "','2'", "Aproval Pengajuan SEP Finger Print");

                System.out.println("Proses aproval finger print selesai, data nomor rawat berhasil dikirim ke SEP..!!");
            } else {
                Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
                System.out.println("Pesan : " + nameNode.path("message").asText());
            }
        } catch (Exception ex) {
            System.out.println("Notifikasi Bridging : " + ex);
            if (ex.toString().contains("UnknownHostException")) {
                Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
                JOptionPane.showMessageDialog(null, "Koneksi ke server BPJS terputus...!");
            }
        }
    }
    
    private void simpanSEP() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.add("X-Cons-ID", Sequel.decXML2(prop.getProperty("CONSIDAPIBPJS"), prop.getProperty("KEY")));
            utc = String.valueOf(api.GetUTCdatetimeAsString());
            headers.add("X-Timestamp", utc);
            headers.add("X-Signature", api.getHmac(utc));
            headers.add("user_key", koneksiDB.USERKEYAPIBPJS());
            URL = prop.getProperty("URLAPIBPJS") + "/SEP/2.0/insert";

            requestJson = "{"
                    + "\"request\":{"
                    + "\"t_sep\":{"
                    + "\"noKartu\":\"" + NoKartu + "\","
                    + "\"tglSep\":\"" + Valid.SetTgl(TanggalSEP.getSelectedItem() + "") + "\","
                    + "\"ppkPelayanan\":\"" + kdppk + "\","
                    + "\"jnsPelayanan\":\"" + jenpel + "\","
                    //ini yang baru -----------
                    + "\"klsRawat\":{"
                    + "\"klsRawatHak\":\"" + klsHAK + "\","
                    + "\"klsRawatNaik\":\"\","
                    + "\"pembiayaan\":\"" + pembi + "\","
                    + "\"penanggungJawab\":\"" + pJawab + "\""
                    + "},"
                    //sampai sini ------------
                    + "\"noMR\":\"" + normbpjs + "\","
                    + "\"rujukan\":{"
                    + "\"asalRujukan\":\"" + AsalRujukan.getSelectedItem().toString().substring(0, 1) + "\","
                    + "\"tglRujukan\":\"" + Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + "") + "\","
                    + "\"noRujukan\":\"" + NoRujukan + "\","
                    + "\"ppkRujukan\":\"" + kdppkrujuk + "\""
                    + "},"
                    + "\"catatan\":\"" + Catatan + "\","
                    + "\"diagAwal\":\"" + KdPenyakit + "\","
                    + "\"poli\":{"
                    + "\"tujuan\": \"" + kdpoliSEP + "\","
                    + "\"eksekutif\": \"" + Eksekutif.getSelectedItem().toString().substring(0, 1) + "\""
                    + "},"
                    + "\"cob\":{"
                    + "\"cob\": \"" + COB.getSelectedItem().toString().substring(0, 1) + "\""
                    + "},"
                    + "\"katarak\":{"
                    + "\"katarak\":\"" + KasusKatarak.getSelectedItem().toString().substring(0, 1) + "\""
                    + "},"
                    + "\"jaminan\":{"
                    + "\"lakaLantas\":\"" + LakaLantas.getSelectedItem().toString().substring(0, 1) + "\","
                    + "\"penjamin\":{"
                    + "\"tglKejadian\":\"" + tglkll + "\","
                    + "\"keterangan\":\"" + Ket + "\","
                    + "\"suplesi\":{"
                    + "\"suplesi\":\"" + suplesi.getSelectedItem().toString().substring(0, 1) + "\","
                    + "\"noSepSuplesi\":\"" + NoSEPSuplesi + "\","
                    + "\"lokasiLaka\":{"
                    + "\"kdPropinsi\":\"" + KdProv + "\","
                    + "\"kdKabupaten\":\"" + KdKab + "\","
                    + "\"kdKecamatan\":\"" + KdKec + "\""
                    + "}"
                    + "}"
                    + "}"
                    + "},"
                    //ini yang baru -----------
                    + "\"tujuanKunj\":\"" + tujuanKunKirim + "\","
                    + "\"flagProcedure\":\"" + flagPro + "\","
                    + "\"kdPenunjang\":\"" + kdpenunjang + "\","
                    + "\"assesmentPel\":\"" + asses + "\","
                    //sampai sini ------------
                    + "\"skdp\":{"
                    + "\"noSurat\":\"" + noSurat + "\","
                    + "\"kodeDPJP\":\"" + Kddpjp + "\""
                    + "},"
                    //ini yang baru -----------
                    + "\"dpjpLayan\": \"" + kddpjpLayan + "\","
                    //sampai sini -------------
                    + "\"noTelp\": \"" + NoTelp + "\","
                    + "\"user\":\"" + usernya + "\""
                    + "}"
                    + "}"
                    + "}";

            simpanBackupSEPAwal();
            //jeda 3 detik
            Thread.sleep(3000);
            System.out.println("Pesan SEP Backup : Berhasil menyimpan data ketabel bridging_sep_backup (Waktu : " + Sequel.cariIsi("select date_format(now(),'%d-%m-%Y %H:%i:%s')") + ") ...!!!");

            HttpEntity requestEntity = new HttpEntity(requestJson, headers);
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
            JsonNode nameNode = root.path("metaData");
            respons = nameNode.toString();
            System.out.println("code : " + nameNode.path("code").asText());
            System.out.println("message : " + nameNode.path("message").asText());
            System.out.println("yg dikirim ke ws Trusk Mark : " + requestJson);

            if (nameNode.path("code").asText().equals("200")) {
//ini yang baru -----------            
                JsonNode response = mapper.readTree(api.Decrypt(root.path("response").asText(), utc)).path("sep").path("noSep");
//sampai sini -------------
                System.out.println("ini responya : " + mapper.readTree(api.Decrypt(root.path("response").asText(), utc)));
                System.out.println("No. SEP : " + response.asText());
                cekSEP = Sequel.cariInteger("select count(-1) from bridging_sep where no_sep='" + response.asText() + "' and urutan_sep='1'");

                if (cekSEP > 0) {
                    if (Sequel.menyimpantf("bridging_sep", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                        response.asText(), norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                        NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                        nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                        LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya, 
                        normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                        "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                        COB.getSelectedItem().toString(), "", NoTelp, KasusKatarak.getSelectedItem().toString(), tglkll, Ket, 
                        suplesi.getSelectedItem().toString(), NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, 
                        Kddpjp, NmDPJP, "", klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan,
                        Sequel.cariIsi("select ifnull(MAX(urutan_sep)+1,1) from bridging_sep where no_sep='" + response.asText() + "'"), "", "AKTIF"
                    }) == true) {
                        Sequel.menyimpan("rujuk_masuk", "?,?,?,?,?,?,?,?,?,?,?", 11, new String[]{
                            norwBokingBPJS.getText(), nmrujukan, "-", NoRujukan, "0", nmrujukan, KdPenyakit, "-", "-", "-", kode_rujukanya
                        });
                    }

                    //Simpan Ke tabel bridging_sep_backup
                    if (Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                        "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                        NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                        nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                        LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                        normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                        "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                        COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                        KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                        NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                        klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, api.Decrypt(root.path("response").asText(), utc)
                    }) == false) {
                        Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                            "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                            NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                            nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                            LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                            normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                            "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                            COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                            KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                            NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                            klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, api.Decrypt(root.path("response").asText(), utc)
                        });
                    }

                    Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='SUDAH',no_rawat='" + norwBokingBPJS.getText() + "'");

                } else {
                    if (Sequel.menyimpantf("bridging_sep", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                        response.asText(), norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                        NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                        nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                        LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                        normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                        "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                        COB.getSelectedItem().toString(), "", NoTelp, KasusKatarak.getSelectedItem().toString(),
                        tglkll, Ket, suplesi.getSelectedItem().toString(), NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab,
                        KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "", klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, "1", "", "AKTIF"
                    }) == true) {
                        Sequel.menyimpan("rujuk_masuk", "?,?,?,?,?,?,?,?,?,?,?", 11, new String[]{
                            norwBokingBPJS.getText(), nmrujukan, "-", NoRujukan, "0", nmrujukan, KdPenyakit, "-", "-", "-", kode_rujukanya
                        });
                    }

                    //Simpan Ke tabel bridging_sep_backup
                    if (Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                        "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                        NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                        nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                        LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                        normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                        "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                        COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                        KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                        NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                        klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, api.Decrypt(root.path("response").asText(), utc)
                    }) == false) {
                        Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                            "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                            NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                            nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                            LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                            normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                            "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                            COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                            KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                            NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                            klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, api.Decrypt(root.path("response").asText(), utc)
                        });
                    }

                    Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='SUDAH',no_rawat='" + norwBokingBPJS.getText() + "'");
                }
            } else {
                //Simpan Ke tabel bridging_sep_backup
                if (Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                    "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                    NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                    nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                    LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                    normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                    "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                    COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                    KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                    NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                    klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, respons
                }) == false) {
                    Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                        "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                        NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                        nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                        LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                        normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                        "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                        COB.getSelectedItem().toString(), "", NoTelp, nameNode.path("code").asText(), nameNode.path("message").asText(),
                        KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                        NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                        klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, respons
                    });
                }

                Sequel.mengedit("kelengkapan_booking_sep_bpjs", "kd_booking='" + kdbokingbpjs.getText() + "'", "status_cetak_sep='GAGAL',no_rawat='" + norwBokingBPJS.getText() + "'");
                System.out.println("Pesan : " + nameNode.path("message").asText());
            }
        } catch (Exception ex) {
            System.out.println("Notifikasi Bridging : " + ex);
            if (ex.toString().contains("UnknownHostException")) {
                JOptionPane.showMessageDialog(null, "Koneksi ke server BPJS terputus...!");
            }
        }
    }
    
    private void simpanBackupSEPAwal() {
        //Simpan Ke tabel bridging_sep_backup
        System.out.println("Pesan SEP Backup : Menyiapkan data ketabel bridging_sep_backup utk. disimpan (Waktu : " + Sequel.cariIsi("select date_format(now(),'%d-%m-%Y %H:%i:%s')") + ") ...!!!");
        if (Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
            "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
            NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
            nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
            LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
            normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
            "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
            COB.getSelectedItem().toString(), "", NoTelp, "XXX", "Anjungan Pasien Elektronik Mengirim",
            KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
            NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
            klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, requestJson
        }) == false) {
            Sequel.menyimpantf("bridging_sep_backup", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", "SEP", 59, new String[]{
                "-", norwBokingBPJS.getText(), Valid.SetTgl(TanggalSEP.getSelectedItem() + ""), Valid.SetTgl(tglrujukanbpjs.getSelectedItem() + ""),
                NoRujukan, kdppkrujuk, nmppkrujukan, kdppk, nmppk, jenpel, Catatan, KdPenyakit,
                nmdiagnosa, kdpoliSEP, nmpoliSEP, Kelas.getSelectedItem().toString().substring(0, 1),
                LakaLantas.getSelectedItem().toString().substring(0, 1), LokasiLaka, usernya,
                normbpjs, nmpasienSEP, TglLahir, JenisPeserta, JK, NoKartu,
                "0000-00-00 00:00:00", AsalRujukan.getSelectedItem().toString(), Eksekutif.getSelectedItem().toString(),
                COB.getSelectedItem().toString(), "", NoTelp, "XXX", "Anjungan Pasien Elektronik Mengirim",
                KasusKatarak.getSelectedItem().toString().substring(0, 1), tglkll, Ket, suplesi.getSelectedItem().toString(),
                NoSEPSuplesi, KdProv, NmProv, KdKab, NmKab, KdKec, NmKec, noSurat, Kddpjp, NmDPJP, "",
                klsHAK, "", pembi, pJawab, tujuanKun, flagPro, kdpenunjang, asses, kddpjpLayan, nmdpjpLayan, requestJson
            });
        }
    }
    
    public void setData(String kode) {
        kdbokingbpjs.setText(kode);
        cekKodeBokingBPJS();
    }
}
