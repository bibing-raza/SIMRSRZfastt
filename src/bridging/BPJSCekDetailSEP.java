/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgKamar.java
 *
 * Created on May 23, 2010, 12:07:21 AM
 */

package bridging;
import fungsi.WarnaTable;
import java.awt.Dimension;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import fungsi.koneksiDB;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author dosen
 */
public final class BPJSCekDetailSEP extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private validasi Valid = new validasi();
    private sekuel Sequel = new sekuel();
    private BPJSApi api = new BPJSApi();
    private String URL = "", utc = "";
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root, nameNode, response;
        
    /** Creates new form DlgKamar
     * @param parent
     * @param modal */
    public BPJSCekDetailSEP(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocation(10,2);
        setSize(628,674);

        Object[] row={"","",""};
        tabMode=new DefaultTableModel(null,row){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        
        tbSEPvclaim.setModel(tabMode);
        tbSEPvclaim.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbSEPvclaim.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for (int i = 0; i < 3; i++) {
            TableColumn column = tbSEPvclaim.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(150);
            } else if (i == 1) {
                column.setPreferredWidth(250);
            } else if (i == 2) {
                column.setPreferredWidth(250);
            }
        }
        tbSEPvclaim.setDefaultRenderer(Object.class, new WarnaTable());
        
        try {
            URL = koneksiDB.URLAPIBPJS() + "/SEP/";
        } catch (Exception e) {
            System.out.println("E : " + e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbSEPvclaim = new widget.Table();
        panelGlass6 = new widget.panelisi();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setIconImages(null);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255), 3), "::[ Detail SEP VClaim Peserta BPJS ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbSEPvclaim.setAutoCreateRowSorter(true);
        tbSEPvclaim.setToolTipText("");
        tbSEPvclaim.setName("tbSEPvclaim"); // NOI18N
        Scroll.setViewportView(tbSEPvclaim);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass6.setName("panelGlass6"); // NOI18N
        panelGlass6.setPreferredSize(new java.awt.Dimension(44, 54));
        panelGlass6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 9));

        BtnKeluar.setForeground(new java.awt.Color(0, 0, 0));
        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass6.add(BtnKeluar);

        internalFrame1.add(panelGlass6, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        }
    }//GEN-LAST:event_BtnKeluarKeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            BPJSCekDetailSEP dialog = new BPJSCekDetailSEP(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnKeluar;
    private widget.ScrollPane Scroll;
    private widget.InternalFrame internalFrame1;
    private widget.panelisi panelGlass6;
    private widget.Table tbSEPvclaim;
    // End of variables declaration//GEN-END:variables

    public void tampil(String sep) {
        try {
            headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.add("X-Cons-ID", koneksiDB.CONSIDAPIBPJS());
            utc = String.valueOf(api.GetUTCdatetimeAsString());
            headers.add("X-Timestamp", utc);
            headers.add("X-Signature", api.getHmac(utc));
            headers.add("user_key", koneksiDB.USERKEYAPIBPJS());
            requestEntity = new HttpEntity(headers);
            root = mapper.readTree(api.getRest().exchange(URL + sep, HttpMethod.GET, requestEntity, String.class).getBody());
            nameNode = root.path("metaData");
            System.out.println("code : " + nameNode.path("code").asText());
            System.out.println("message : " + nameNode.path("message").asText());            
            
            if (nameNode.path("code").asText().equals("200")) {
                Valid.tabelKosong(tabMode);
                response = mapper.readTree(api.Decrypt(root.path("response").asText(), utc));
                //response = root.path("response");
                tabMode.addRow(new Object[]{
                    "Nomor SEP", ": " + response.path("noSep").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Tanggal SEP", ": " + Valid.SetTglINDONESIA(response.path("tglSep").asText()), ""
                });
                tabMode.addRow(new Object[]{
                    "Jenis Pelayanan", ": " + response.path("jnsPelayanan").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Kelas Rawat", ": " + response.path("kelasRawat").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Diagnosa", ": " + response.path("diagnosa").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Nomor Rujukan", ": " + response.path("noRujukan").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Poli/Unit/Spesialis", ": " + response.path("poli").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Poli Eksekutif", ": " + response.path("poliEksekutif").asText().replaceAll("0", "0. Tidak").replaceAll("1", "1.Ya"), ""
                });
                tabMode.addRow(new Object[]{
                    "Catatan", ": " + response.path("catatan").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Penjamin", ": " + response.path("penjamin").asText().replaceAll("null", "-"), ""
                });
                tabMode.addRow(new Object[]{
                    "Status Kecelakaan", ": " + response.path("kdStatusKecelakaan").asText() + " " + response.path("nmstatusKecelakaan").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Lokasi Kecelakaan", ": ", ""
                });
                tabMode.addRow(new Object[]{
                    "", "   Kode Kecamatan", ": " + response.path("lokasiKejadian").path("kdKec").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Kode Kabupaten", ": " + response.path("lokasiKejadian").path("kdKab").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Kode Propinsi", ": " + response.path("lokasiKejadian").path("kdProp").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Keterangan Kejadian", ": " + response.path("lokasiKejadian").path("ketKejadian").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Lokasi", ": " + response.path("lokasiKejadian").path("lokasi").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Tanggal Kejadian", ": " + response.path("lokasiKejadian").path("tglKejadian").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "Dokter Penanggung Jawab", ": " + response.path("dpjp").path("kdDPJP").asText() + " - " + response.path("dpjp").path("nmDPJP").asText(), ""
                });
                tabMode.addRow(new Object[]{
                    "Kepesertaan", ": ", ""
                });
                tabMode.addRow(new Object[]{
                    "", "   Asuransi", ": " + response.path("peserta").path("asuransi").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Hak Kelas", ": " + response.path("peserta").path("hakKelas").asText()
                });
                tabMode.addRow(new Object[]{
                    "", "   Jenis Peserta", ": " + response.path("peserta").path("jnsPeserta").asText()
                });
                tabMode.addRow(new Object[]{
                    "", "   Jenis Kelamin", ": " + response.path("peserta").path("kelamin").asText().replaceAll("L", "Laki-laki").replaceAll("P", "Perempuan")
                });
                tabMode.addRow(new Object[]{
                    "", "   Nama Peserta", ": " + response.path("peserta").path("nama").asText()
                });
                tabMode.addRow(new Object[]{
                    "", "   Nomor Kartu", ": " + response.path("peserta").path("noKartu").asText()
                });
                tabMode.addRow(new Object[]{
                    "", "   Nomor RM", ": " + response.path("peserta").path("noMr").asText()
                });
                tabMode.addRow(new Object[]{
                    "", "   Tanggal Lahir", ": " + Valid.SetTglINDONESIA(response.path("peserta").path("tglLahir").asText())
                });
                tabMode.addRow(new Object[]{
                    "Rencana Kontrol", ": ", ""
                });
                tabMode.addRow(new Object[]{
                    "", "   Kode Dokter", ": " + response.path("kontrol").path("kdDokter").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   Nama Dokter", ": " + response.path("kontrol").path("nmDokter").asText().replaceAll("null", "-")
                });
                tabMode.addRow(new Object[]{
                    "", "   No. Surat Rencana Kontrol", ": " + response.path("kontrol").path("noSurat").asText().replaceAll("null", "-")
                });
            } else {
                JOptionPane.showMessageDialog(rootPane, "Notifikasi WS VClaim 2.0 : Kode " + nameNode.path("code").asText() + ", Pesan : " + nameNode.path("message").asText());
            }
        } catch (Exception ex) {
            System.out.println("Notifikasi Peserta : " + ex);
            if (ex.toString().contains("UnknownHostException")) {
                JOptionPane.showMessageDialog(rootPane, "Koneksi ke server BPJS terputus...!");
                dispose();
            }
        }
    }
}
