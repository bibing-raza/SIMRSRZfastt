/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgLhtBiaya.java
 *
 * Created on 12 Jul 10, 16:21:34
 */

package laporan;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author perpustakaan
 */
public final class DlgRl34 extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private Connection koneksi=koneksiDB.condb();
    private sekuel Sequel=new sekuel();
    private validasi Valid=new validasi();
    private PreparedStatement ps;
    private ResultSet rs;
    private int i=0;   
    
    /** Creates new form DlgLhtBiaya
     * @param parent
     * @param modal */
    public DlgRl34(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(8,1);
        setSize(885,674);

        Object[] rowRwJlDr={"No.","Jenis Kegiatan Persalinan","Rumah Sakit","Bidan","Puskesmas",
                            "Faskes Lainnya","Rujukan Medis Hidup","Rujukan Medis Mati","Rujukan Medis Total",
                            "Non Medis Hidup","Non Medis Mati","Non Medis Total","Non Rujukan Hidup",
                            "Non Rujukan Mati","Non Rujukan Total","Dirujuk"};
        tabMode=new DefaultTableModel(null,rowRwJlDr){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        tbBangsal.setModel(tabMode);
        //tbBangsal.setDefaultRenderer(Object.class, new WarnaTable(jPanel2.getBackground(),tbBangsal.getBackground()));
        tbBangsal.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbBangsal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 16; i++) {
            TableColumn column = tbBangsal.getColumnModel().getColumn(i);
            if(i==0){
                column.setPreferredWidth(25);
            }else if(i==1){
                column.setPreferredWidth(250);
            }else{
                column.setPreferredWidth(110);
            }
        }
        tbBangsal.setDefaultRenderer(Object.class, new WarnaTable());
        TCari.setDocument(new batasInput((byte)4).getKata(TCari));
    }    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbBangsal = new widget.Table();
        panelGlass5 = new widget.panelisi();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        jLabel7 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ RL 3.4 Kegiatan Kebidanan ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbBangsal.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbBangsal.setName("tbBangsal"); // NOI18N
        Scroll.setViewportView(tbBangsal);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Tahun : ");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(60, 23));
        panelGlass5.add(jLabel6);

        TCari.setForeground(new java.awt.Color(0, 0, 0));
        TCari.setMaxLenth(4);
        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(63, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass5.add(TCari);

        BtnCari.setForeground(new java.awt.Color(0, 0, 0));
        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setText("Tampilkan Data");
        BtnCari.setToolTipText("Alt+2");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(130, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnCari);

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass5.add(jLabel7);

        BtnPrint.setForeground(new java.awt.Color(0, 0, 0));
        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint);

        BtnKeluar.setForeground(new java.awt.Color(0, 0, 0));
        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if(tabMode.getRowCount()==0){
            JOptionPane.showMessageDialog(null,"Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
            TCari.requestFocus();
        }else if(tabMode.getRowCount()!=0){
            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("tahun", TCari.getText());
            param.put("logo", Sequel.cariGambar("select logo from setting"));
            Valid.MyReport("rptRl34.jasper", "report", "::[ Formulir RL 3.4 Kebidanan ]::",
                    " select d.jns_persalinan, COUNT(case when d.rujukan= 'Rumah Sakit' then 1 end) AS RS, "
                    + " COUNT(case when d.rujukan= 'Bidan' then 1 end) AS Bidan, "
                    + " COUNT(case when d.rujukan= 'Puskesmas' then 1 end) AS Puskesmas, "
                    + " COUNT(case when d.rujukan= 'Faskes Lainnya' then 1 end) AS Faskes_Lainnya, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya')  and k.stts_pulang not like 'Meninggal%' then 1 end) AS Rujukan_Medis_Hidup, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya')  and k.stts_pulang like 'Meninggal%' then 1 end) AS Rujukan_Medis_Mati, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya') then 1 end) AS Rujukan_Medis_Total, "
                    + " COUNT(case when d.rujukan= 'Non Medis' and k.stts_pulang not like 'Meninggal%' then 1 end) AS Non_medis_Hidup, "
                    + " COUNT(case when d.rujukan= 'Non Medis' and k.stts_pulang like 'Meninggal%' then 1 end) AS Non_medis_Mati, "
                    + " COUNT(case when d.rujukan= 'Non Medis' then 1 end) AS Non_Medis_Total, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' and k.stts_pulang not like 'Meninggal%' then 1 end) AS Non_rujukan_Hidup, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' and k.stts_pulang like 'Meninggal%' then 1 end) AS Non_rujukan_Mati, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' then 1 end) AS Non_rujukan_Total, "
                    + " COUNT(case when k.stts_pulang like '%Dirujuk%' then 1 end) AS Dirujuk "
                    + " FROM data_persalinan d INNER JOIN kamar_inap k ON k.no_rawat = d.no_rawat "
                    + " WHERE d.no_rawat LIKE '" + TCari.getText() + "/%' AND k.stts_pulang not like 'Pindah%' GROUP BY d.jns_persalinan", param);
        }
        this.setCursor(Cursor.getDefaultCursor());
}//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnPrintActionPerformed(null);
        }else{
            //Valid.pindah(evt, BtnHapus, BtnAll);
        }
}//GEN-LAST:event_BtnPrintKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            dispose();
        }else{Valid.pindah(evt,BtnKeluar,TCari);}
}//GEN-LAST:event_BtnKeluarKeyPressed

private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
    if (TCari.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Tahun harus diisi dulu dengan benar...!!!");
        TCari.setText(Sequel.cariIsi("SELECT DATE_FORMAT(NOW(),'%Y') tahun"));
        TCari.requestFocus();
    } else if (TCari.getText().length() < 4) {
        JOptionPane.showMessageDialog(null, "Tahun harus diisi minimal dengan 4 digit angka...!!!");
        TCari.requestFocus();
    } else {
        tampil();
    }
}//GEN-LAST:event_BtnCariActionPerformed

private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); 
            tampil();
            this.setCursor(Cursor.getDefaultCursor());
        }else{
            Valid.pindah(evt, TCari, BtnPrint);
        }
}//GEN-LAST:event_BtnCariKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            BtnCariActionPerformed(null);
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
            BtnCari.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        tampil();

    }//GEN-LAST:event_formWindowActivated

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRl34 dialog = new DlgRl34(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private widget.panelisi panelGlass5;
    private widget.Table tbBangsal;
    // End of variables declaration//GEN-END:variables

    public void tampil(){  
        Valid.tabelKosong(tabMode);
        try {
            ps = koneksi.prepareStatement(
                    " select d.jns_persalinan, COUNT(case when d.rujukan= 'Rumah Sakit' then 1 end) AS RS, "
                    + " COUNT(case when d.rujukan= 'Bidan' then 1 end) AS Bidan, "
                    + " COUNT(case when d.rujukan= 'Puskesmas' then 1 end) AS Puskesmas, "
                    + " COUNT(case when d.rujukan= 'Faskes Lainnya' then 1 end) AS Faskes_Lainnya, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya')  and k.stts_pulang not like 'Meninggal%' then 1 end) AS Rujukan_Medis_Hidup, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya')  and k.stts_pulang like 'Meninggal%' then 1 end) AS Rujukan_Medis_Mati, "
                    + " COUNT(case when d.rujukan in ('Rumah Sakit', 'Bidan', 'Puskesmas', 'Faskes Lainnya') then 1 end) AS Rujukan_Medis_Total, "
                    + " COUNT(case when d.rujukan= 'Non Medis' and k.stts_pulang not like 'Meninggal%' then 1 end) AS Non_medis_Hidup, "
                    + " COUNT(case when d.rujukan= 'Non Medis' and k.stts_pulang like 'Meninggal%' then 1 end) AS Non_medis_Mati, "
                    + " COUNT(case when d.rujukan= 'Non Medis' then 1 end) AS Non_Medis_Total, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' and k.stts_pulang not like 'Meninggal%' then 1 end) AS Non_rujukan_Hidup, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' and k.stts_pulang like 'Meninggal%' then 1 end) AS Non_rujukan_Mati, "
                    + " COUNT(case when d.rujukan= 'Tanpa Rujukan' then 1 end) AS Non_rujukan_Total, "
                    + " COUNT(case when k.stts_pulang like '%Dirujuk%' then 1 end) AS Dirujuk "
                    + " FROM data_persalinan d INNER JOIN kamar_inap k ON k.no_rawat = d.no_rawat "
                    + " WHERE d.no_rawat LIKE '" + TCari.getText() + "/%' AND k.stts_pulang not like 'Pindah%' GROUP BY d.jns_persalinan");
            try {
                rs = ps.executeQuery();
                i = 1;
                while (rs.next()) {
                    tabMode.addRow(new Object[]{
                        i + ".",
                        rs.getString("jns_persalinan"),
                        rs.getString("RS"),
                        rs.getString("Bidan"),
                        rs.getString("Puskesmas"),
                        rs.getString("Faskes_Lainnya"),
                        rs.getString("Rujukan_Medis_Hidup"),
                        rs.getString("Rujukan_Medis_Mati"),
                        rs.getString("Rujukan_Medis_Total"),
                        rs.getString("Non_medis_Hidup"),
                        rs.getString("Non_medis_Mati"),
                        rs.getString("Non_Medis_Total"),
                        rs.getString("Non_rujukan_Hidup"),
                        rs.getString("Non_rujukan_Mati"),
                        rs.getString("Non_rujukan_Total"),
                        rs.getString("Dirujuk")
                    });
                    i++;
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println("simrskhanza.DlgRl34.tampil() : " + e);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    public void fokus() {
        TCari.setText(Sequel.cariIsi("SELECT DATE_FORMAT(NOW(),'%Y') tahun"));
        BtnCari.requestFocus();
    }

}
