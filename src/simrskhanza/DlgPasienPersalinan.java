package simrskhanza;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author dosen
 */
public class DlgPasienPersalinan extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private Properties prop = new Properties();
    private PreparedStatement ps, ps1;
    private ResultSet rs, rs1;
    private int cekData = 0;
    private String stsPulang = "";

    /**
     * Creates new form DlgPemberianInfus
     *
     * @param parent
     * @param modal
     */
    public DlgPasienPersalinan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        tabMode = new DefaultTableModel(null, new Object[]{
            "No. Rawat", "No. RM", "Nama Pasien", "Jenis Persalinan", "Rujukan", "Cara Bayar",
            "Ruang Perawatan Inap", "Tgl. Masuk", "Tgl. Pulang", "Status Pulang", "Nama DPJP"
        }) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tbPersalinan.setModel(tabMode);
        
        tbPersalinan.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbPersalinan.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for (int i = 0; i < 11; i++) {
            TableColumn column = tbPersalinan.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(110);
            } else if (i == 1) {
                column.setPreferredWidth(70);
            } else if (i == 2) {
                column.setPreferredWidth(250);
            } else if (i == 3) {
                column.setPreferredWidth(195);
            } else if (i == 4) {
                column.setPreferredWidth(100);
            } else if (i == 5) {
                column.setPreferredWidth(110);
            } else if (i == 6) {
                column.setPreferredWidth(240);
            } else if (i == 7) {
                column.setPreferredWidth(75);
            } else if (i == 8) {
                column.setPreferredWidth(75);
            } else if (i == 9) {
                column.setPreferredWidth(100);
            } else if (i == 10) {
                column.setPreferredWidth(220);
            }
        }
        tbPersalinan.setDefaultRenderer(Object.class, new WarnaTable());
        
        TCari.setDocument(new batasInput((byte) 100).getKata(TCari));
        if (koneksiDB.cariCepat().equals("aktif")) {
            TCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    tampil();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    tampil();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    tampil();
                }
            });
        }        
        
        ChkInput.setSelected(false);
        isForm();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        MnPrinDataPersalinan = new javax.swing.JMenuItem();
        MnPrinRekapTotal = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        FixPersalinan = new widget.TextBox();
        FixRujukan = new widget.TextBox();
        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbPersalinan = new widget.Table();
        jPanel3 = new javax.swing.JPanel();
        panelGlass8 = new widget.panelisi();
        BtnSimpan = new widget.Button();
        BtnBatal = new widget.Button();
        BtnHapus = new widget.Button();
        BtnGanti = new widget.Button();
        BtnAll = new widget.Button();
        BtnCari = new widget.Button();
        BtnKeluar = new widget.Button();
        panelGlass10 = new widget.panelisi();
        jLabel63 = new widget.Label();
        DTPCari1 = new widget.Tanggal();
        jLabel64 = new widget.Label();
        DTPCari2 = new widget.Tanggal();
        jLabel8 = new widget.Label();
        cmbLimit = new widget.ComboBox();
        jLabel9 = new widget.Label();
        cmbDokter = new widget.ComboBox();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        jLabel7 = new widget.Label();
        LCount = new widget.Label();
        PanelInput = new javax.swing.JPanel();
        ChkInput = new widget.CekBox();
        FormInput = new widget.PanelBiasa();
        jLabel5 = new widget.Label();
        norawat = new widget.TextBox();
        norm = new widget.TextBox();
        namapasien = new widget.TextBox();
        jPanel4 = new javax.swing.JPanel();
        rPersalinanNormal = new widget.RadioButton();
        rSC = new widget.RadioButton();
        jLabel48 = new widget.Label();
        rPerdarahanSebelum = new widget.RadioButton();
        rPerdarahanSesudah = new widget.RadioButton();
        rPreEklamsi = new widget.RadioButton();
        rEklamsi = new widget.RadioButton();
        rInfeksi = new widget.RadioButton();
        rLainlain = new widget.RadioButton();
        rAmniotomy = new widget.RadioButton();
        rPartusPenyulit = new widget.RadioButton();
        rVacumExtraksi = new widget.RadioButton();
        rSCMOW = new widget.RadioButton();
        jPanel2 = new javax.swing.JPanel();
        rAbortus = new widget.RadioButton();
        rImunisasi1 = new widget.RadioButton();
        rImunisasi2 = new widget.RadioButton();
        rOPLaparatomi = new widget.RadioButton();
        rPerawatanKonservatif = new widget.RadioButton();
        jPanel5 = new javax.swing.JPanel();
        rRS = new widget.RadioButton();
        rBidan = new widget.RadioButton();
        rPuskes = new widget.RadioButton();
        rFaskes = new widget.RadioButton();
        rNonMedis = new widget.RadioButton();
        rTanpaRujukan = new widget.RadioButton();

        jPopupMenu1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jPopupMenu1.setName("jPopupMenu1"); // NOI18N
        jPopupMenu1.setPreferredSize(new java.awt.Dimension(220, 60));

        MnPrinDataPersalinan.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        MnPrinDataPersalinan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/category.png"))); // NOI18N
        MnPrinDataPersalinan.setText("Cetak Data Persalinan");
        MnPrinDataPersalinan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        MnPrinDataPersalinan.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        MnPrinDataPersalinan.setIconTextGap(5);
        MnPrinDataPersalinan.setName("MnPrinDataPersalinan"); // NOI18N
        MnPrinDataPersalinan.setPreferredSize(new java.awt.Dimension(200, 26));
        MnPrinDataPersalinan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnPrinDataPersalinanActionPerformed(evt);
            }
        });
        jPopupMenu1.add(MnPrinDataPersalinan);

        MnPrinRekapTotal.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        MnPrinRekapTotal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/category.png"))); // NOI18N
        MnPrinRekapTotal.setText("Rekap Total Data Persalinan");
        MnPrinRekapTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        MnPrinRekapTotal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        MnPrinRekapTotal.setIconTextGap(5);
        MnPrinRekapTotal.setName("MnPrinRekapTotal"); // NOI18N
        MnPrinRekapTotal.setPreferredSize(new java.awt.Dimension(200, 26));
        MnPrinRekapTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnPrinRekapTotalActionPerformed(evt);
            }
        });
        jPopupMenu1.add(MnPrinRekapTotal);

        FixPersalinan.setForeground(new java.awt.Color(0, 0, 0));
        FixPersalinan.setHighlighter(null);
        FixPersalinan.setName("FixPersalinan"); // NOI18N

        FixRujukan.setForeground(new java.awt.Color(0, 0, 0));
        FixRujukan.setHighlighter(null);
        FixRujukan.setName("FixRujukan"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255), 3), "::[ Data Persalinan Pasien ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setComponentPopupMenu(jPopupMenu1);
        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbPersalinan.setAutoCreateRowSorter(true);
        tbPersalinan.setToolTipText("Silahkan klik untuk memilih data yang ataupun dihapus");
        tbPersalinan.setComponentPopupMenu(jPopupMenu1);
        tbPersalinan.setName("tbPersalinan"); // NOI18N
        tbPersalinan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPersalinanMouseClicked(evt);
            }
        });
        tbPersalinan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPersalinanKeyPressed(evt);
            }
        });
        Scroll.setViewportView(tbPersalinan);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(44, 100));
        jPanel3.setLayout(new java.awt.BorderLayout(1, 1));

        panelGlass8.setName("panelGlass8"); // NOI18N
        panelGlass8.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        BtnSimpan.setForeground(new java.awt.Color(0, 0, 0));
        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnSimpan);

        BtnBatal.setForeground(new java.awt.Color(0, 0, 0));
        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Cancel-2-16x16.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setText("Baru");
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setName("BtnBatal"); // NOI18N
        BtnBatal.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnBatal);

        BtnHapus.setForeground(new java.awt.Color(0, 0, 0));
        BtnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/stop_f2.png"))); // NOI18N
        BtnHapus.setMnemonic('H');
        BtnHapus.setText("Hapus");
        BtnHapus.setToolTipText("Alt+H");
        BtnHapus.setName("BtnHapus"); // NOI18N
        BtnHapus.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHapusActionPerformed(evt);
            }
        });
        BtnHapus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnHapusKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnHapus);

        BtnGanti.setForeground(new java.awt.Color(0, 0, 0));
        BtnGanti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/inventaris.png"))); // NOI18N
        BtnGanti.setMnemonic('G');
        BtnGanti.setText("Ganti");
        BtnGanti.setToolTipText("Alt+G");
        BtnGanti.setName("BtnGanti"); // NOI18N
        BtnGanti.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnGanti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGantiActionPerformed(evt);
            }
        });
        BtnGanti.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnGantiKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnGanti);

        BtnAll.setForeground(new java.awt.Color(0, 0, 0));
        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setText("Semua");
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnAll);

        BtnCari.setForeground(new java.awt.Color(0, 0, 0));
        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setText("Tampilkan Data");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(130, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnCari);

        BtnKeluar.setForeground(new java.awt.Color(0, 0, 0));
        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnKeluar);

        jPanel3.add(panelGlass8, java.awt.BorderLayout.PAGE_END);

        panelGlass10.setName("panelGlass10"); // NOI18N
        panelGlass10.setPreferredSize(new java.awt.Dimension(44, 44));
        panelGlass10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel63.setForeground(new java.awt.Color(0, 0, 0));
        jLabel63.setText("Tgl. Rawat : ");
        jLabel63.setName("jLabel63"); // NOI18N
        jLabel63.setPreferredSize(new java.awt.Dimension(80, 14));
        panelGlass10.add(jLabel63);

        DTPCari1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25-08-2023" }));
        DTPCari1.setDisplayFormat("dd-MM-yyyy");
        DTPCari1.setName("DTPCari1"); // NOI18N
        DTPCari1.setOpaque(false);
        DTPCari1.setPreferredSize(new java.awt.Dimension(95, 23));
        panelGlass10.add(DTPCari1);

        jLabel64.setForeground(new java.awt.Color(0, 0, 0));
        jLabel64.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel64.setText("s.d");
        jLabel64.setName("jLabel64"); // NOI18N
        panelGlass10.add(jLabel64);

        DTPCari2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25-08-2023" }));
        DTPCari2.setDisplayFormat("dd-MM-yyyy");
        DTPCari2.setName("DTPCari2"); // NOI18N
        DTPCari2.setOpaque(false);
        DTPCari2.setPreferredSize(new java.awt.Dimension(95, 23));
        panelGlass10.add(DTPCari2);

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Limit Data :");
        jLabel8.setName("jLabel8"); // NOI18N
        jLabel8.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass10.add(jLabel8);

        cmbLimit.setForeground(new java.awt.Color(0, 0, 0));
        cmbLimit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "100", "200", "300", "400", "500", "1000", "Semua" }));
        cmbLimit.setName("cmbLimit"); // NOI18N
        cmbLimit.setPreferredSize(new java.awt.Dimension(80, 23));
        panelGlass10.add(cmbLimit);

        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Nama Dokter : ");
        jLabel9.setName("jLabel9"); // NOI18N
        jLabel9.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass10.add(jLabel9);

        cmbDokter.setForeground(new java.awt.Color(0, 0, 0));
        cmbDokter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "-" }));
        cmbDokter.setName("cmbDokter"); // NOI18N
        cmbDokter.setPreferredSize(new java.awt.Dimension(250, 20));
        panelGlass10.add(cmbDokter);

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass10.add(jLabel6);

        TCari.setForeground(new java.awt.Color(0, 0, 0));
        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(250, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass10.add(TCari);

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Record :");
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(55, 23));
        panelGlass10.add(jLabel7);

        LCount.setForeground(new java.awt.Color(0, 0, 0));
        LCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LCount.setText("0");
        LCount.setName("LCount"); // NOI18N
        LCount.setPreferredSize(new java.awt.Dimension(50, 23));
        panelGlass10.add(LCount);

        jPanel3.add(panelGlass10, java.awt.BorderLayout.CENTER);

        internalFrame1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(280, 280));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        ChkInput.setForeground(new java.awt.Color(0, 0, 0));
        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('M');
        ChkInput.setText(".: Input Data");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setName("ChkInput"); // NOI18N
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(190, 107));
        FormInput.setLayout(null);

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("No.Rawat :");
        jLabel5.setName("jLabel5"); // NOI18N
        FormInput.add(jLabel5);
        jLabel5.setBounds(0, 6, 70, 23);

        norawat.setEditable(false);
        norawat.setForeground(new java.awt.Color(0, 0, 0));
        norawat.setHighlighter(null);
        norawat.setName("norawat"); // NOI18N
        FormInput.add(norawat);
        norawat.setBounds(75, 6, 130, 23);

        norm.setEditable(false);
        norm.setForeground(new java.awt.Color(0, 0, 0));
        norm.setHighlighter(null);
        norm.setName("norm"); // NOI18N
        FormInput.add(norm);
        norm.setBounds(208, 6, 70, 23);

        namapasien.setEditable(false);
        namapasien.setForeground(new java.awt.Color(0, 0, 0));
        namapasien.setHighlighter(null);
        namapasien.setName("namapasien"); // NOI18N
        FormInput.add(namapasien);
        namapasien.setBounds(280, 6, 360, 23);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(237, 242, 232)), "  Jenis Persalinan  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 102));
        jPanel4.setLayout(null);

        buttonGroup1.add(rPersalinanNormal);
        rPersalinanNormal.setText("Persalinan Normal");
        rPersalinanNormal.setName("rPersalinanNormal"); // NOI18N
        jPanel4.add(rPersalinanNormal);
        rPersalinanNormal.setBounds(10, 20, 135, 20);

        buttonGroup1.add(rSC);
        rSC.setText("Sectio Caesarean (SC)");
        rSC.setName("rSC"); // NOI18N
        jPanel4.add(rSC);
        rSC.setBounds(10, 145, 135, 20);

        jLabel48.setForeground(new java.awt.Color(0, 0, 0));
        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jLabel48.setText("Persalinan dengan komplikasi : ");
        jLabel48.setName("jLabel48"); // NOI18N
        jPanel4.add(jLabel48);
        jLabel48.setBounds(170, 20, 180, 20);

        buttonGroup1.add(rPerdarahanSebelum);
        rPerdarahanSebelum.setText("Perdarahan Sebelum Persalinan");
        rPerdarahanSebelum.setName("rPerdarahanSebelum"); // NOI18N
        jPanel4.add(rPerdarahanSebelum);
        rPerdarahanSebelum.setBounds(170, 45, 180, 20);

        buttonGroup1.add(rPerdarahanSesudah);
        rPerdarahanSesudah.setText("Perdarahan Sesudah Persalinan");
        rPerdarahanSesudah.setName("rPerdarahanSesudah"); // NOI18N
        jPanel4.add(rPerdarahanSesudah);
        rPerdarahanSesudah.setBounds(170, 70, 180, 20);

        buttonGroup1.add(rPreEklamsi);
        rPreEklamsi.setText("Pre Eclampsi");
        rPreEklamsi.setName("rPreEklamsi"); // NOI18N
        jPanel4.add(rPreEklamsi);
        rPreEklamsi.setBounds(170, 95, 180, 20);

        buttonGroup1.add(rEklamsi);
        rEklamsi.setText("Eclampsi");
        rEklamsi.setName("rEklamsi"); // NOI18N
        jPanel4.add(rEklamsi);
        rEklamsi.setBounds(170, 120, 180, 20);

        buttonGroup1.add(rInfeksi);
        rInfeksi.setText("Infeksi");
        rInfeksi.setName("rInfeksi"); // NOI18N
        jPanel4.add(rInfeksi);
        rInfeksi.setBounds(170, 145, 180, 20);

        buttonGroup1.add(rLainlain);
        rLainlain.setText("Lain-lain");
        rLainlain.setName("rLainlain"); // NOI18N
        jPanel4.add(rLainlain);
        rLainlain.setBounds(170, 170, 180, 20);

        buttonGroup1.add(rAmniotomy);
        rAmniotomy.setText("Amniotomy");
        rAmniotomy.setName("rAmniotomy"); // NOI18N
        jPanel4.add(rAmniotomy);
        rAmniotomy.setBounds(10, 45, 135, 20);

        buttonGroup1.add(rPartusPenyulit);
        rPartusPenyulit.setText("Partus Penyulit");
        rPartusPenyulit.setName("rPartusPenyulit"); // NOI18N
        jPanel4.add(rPartusPenyulit);
        rPartusPenyulit.setBounds(10, 70, 135, 20);

        buttonGroup1.add(rVacumExtraksi);
        rVacumExtraksi.setText("Vacum Extraksi");
        rVacumExtraksi.setName("rVacumExtraksi"); // NOI18N
        jPanel4.add(rVacumExtraksi);
        rVacumExtraksi.setBounds(10, 95, 135, 20);

        buttonGroup1.add(rSCMOW);
        rSCMOW.setText("SC + MOW");
        rSCMOW.setName("rSCMOW"); // NOI18N
        jPanel4.add(rSCMOW);
        rSCMOW.setBounds(10, 120, 135, 20);

        FormInput.add(jPanel4);
        jPanel4.setBounds(10, 40, 360, 210);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(237, 242, 232)), "  Non Persalinan  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 102));
        jPanel2.setLayout(null);

        buttonGroup1.add(rAbortus);
        rAbortus.setText("Abortus");
        rAbortus.setName("rAbortus"); // NOI18N
        jPanel2.add(rAbortus);
        rAbortus.setBounds(10, 20, 110, 20);

        buttonGroup1.add(rImunisasi1);
        rImunisasi1.setText("Imunisasi-TT1");
        rImunisasi1.setName("rImunisasi1"); // NOI18N
        jPanel2.add(rImunisasi1);
        rImunisasi1.setBounds(10, 45, 110, 20);

        buttonGroup1.add(rImunisasi2);
        rImunisasi2.setText("Imunisasi-TT2");
        rImunisasi2.setName("rImunisasi2"); // NOI18N
        jPanel2.add(rImunisasi2);
        rImunisasi2.setBounds(10, 70, 110, 20);

        buttonGroup1.add(rOPLaparatomi);
        rOPLaparatomi.setText("OP Laparatomi");
        rOPLaparatomi.setName("rOPLaparatomi"); // NOI18N
        jPanel2.add(rOPLaparatomi);
        rOPLaparatomi.setBounds(10, 95, 110, 20);

        buttonGroup1.add(rPerawatanKonservatif);
        rPerawatanKonservatif.setText("Perawatan / Konservatif");
        rPerawatanKonservatif.setName("rPerawatanKonservatif"); // NOI18N
        jPanel2.add(rPerawatanKonservatif);
        rPerawatanKonservatif.setBounds(10, 120, 140, 20);

        FormInput.add(jPanel2);
        jPanel2.setBounds(370, 40, 160, 210);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(237, 242, 232)), "  Rujukan  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(350, 102));
        jPanel5.setLayout(null);

        buttonGroup2.add(rRS);
        rRS.setText("Rumah Sakit");
        rRS.setName("rRS"); // NOI18N
        jPanel5.add(rRS);
        rRS.setBounds(10, 20, 100, 20);

        buttonGroup2.add(rBidan);
        rBidan.setText("Bidan");
        rBidan.setName("rBidan"); // NOI18N
        jPanel5.add(rBidan);
        rBidan.setBounds(10, 45, 100, 20);

        buttonGroup2.add(rPuskes);
        rPuskes.setText("Puskesmas");
        rPuskes.setName("rPuskes"); // NOI18N
        jPanel5.add(rPuskes);
        rPuskes.setBounds(10, 70, 100, 20);

        buttonGroup2.add(rFaskes);
        rFaskes.setText("Faskes Lainnya");
        rFaskes.setName("rFaskes"); // NOI18N
        jPanel5.add(rFaskes);
        rFaskes.setBounds(10, 95, 100, 20);

        buttonGroup2.add(rNonMedis);
        rNonMedis.setText("Non Medis");
        rNonMedis.setName("rNonMedis"); // NOI18N
        jPanel5.add(rNonMedis);
        rNonMedis.setBounds(10, 120, 100, 20);

        buttonGroup2.add(rTanpaRujukan);
        rTanpaRujukan.setText("Tanpa Rujukan");
        rTanpaRujukan.setName("rTanpaRujukan"); // NOI18N
        jPanel5.add(rTanpaRujukan);
        rTanpaRujukan.setBounds(10, 145, 100, 20);

        FormInput.add(jPanel5);
        jPanel5.setBounds(530, 40, 120, 210);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
        if (norawat.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Belum ada data pasien yang dipilih...!!!!");
        } else {
            DataFix();
            if (FixPersalinan.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Silahkan pilih dulu salah satu option jenis persalinan/non persalinan yg. tersedia...!!!!");
            } else if (FixRujukan.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Silahkan pilih dulu salah satu option jenis rujukan yg. tersedia...!!!!");
            } else {
                Sequel.menyimpan("data_persalinan", "'" + norawat.getText() + "','" + norm.getText() + "',"
                        + "'" + FixPersalinan.getText() + "','" + FixRujukan.getText() + "' ", "Data Persalinan");
                
                tampil();
                emptForm();
                BtnSimpan.setEnabled(false);
                BtnGanti.setEnabled(true);
                BtnKeluar.requestFocus();
            }
        }
}//GEN-LAST:event_BtnSimpanActionPerformed

    private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnSimpanActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnCari, BtnBatal);
        }
}//GEN-LAST:event_BtnSimpanKeyPressed

    private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
        emptPersalinan();
        ChkInput.setSelected(true);
        isForm();        
}//GEN-LAST:event_BtnBatalActionPerformed

    private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            emptPersalinan();
        } else {
            Valid.pindah(evt, BtnSimpan, BtnGanti);
        }
}//GEN-LAST:event_BtnBatalKeyPressed

    private void BtnGantiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGantiActionPerformed
        if (norawat.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Klik salah satu dulu nama pasien pada tabel persalinan...!!!!");
            tbPersalinan.requestFocus();
        } else {
            DataFix();
            Sequel.mengedit("data_persalinan", "no_rawat='" + norawat.getText() + "'", "jns_persalinan='" + FixPersalinan.getText() + "',rujukan='" + FixRujukan.getText() + "'");
            
            tampil();
            emptForm();
        }
}//GEN-LAST:event_BtnGantiActionPerformed

    private void BtnGantiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnGantiKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnGantiActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnBatal, BtnKeluar);
        }
}//GEN-LAST:event_BtnGantiKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
        emptPersalinan();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {
            Valid.pindah(evt, BtnBatal, TCari);
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCariActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            BtnCari.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            BtnKeluar.requestFocus();
        }
}//GEN-LAST:event_TCariKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        emptForm();
        tampil();
}//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnCariActionPerformed(null);
        } else {
            Valid.pindah(evt, TCari, BtnAll);
        }
}//GEN-LAST:event_BtnCariKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        emptPersalinan();
        tampil();
}//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tampil();
            TCari.setText("");
        } else {
            Valid.pindah(evt, BtnCari, BtnKeluar);
        }
}//GEN-LAST:event_BtnAllKeyPressed

    private void tbPersalinanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPersalinanMouseClicked
        if (tabMode.getRowCount() != 0) {
            try {
                getData();
            } catch (java.lang.NullPointerException e) {
            }
        }
}//GEN-LAST:event_tbPersalinanMouseClicked

    private void tbPersalinanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPersalinanKeyPressed
        if (tabMode.getRowCount() != 0) {
            if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_UP) || (evt.getKeyCode() == KeyEvent.VK_DOWN)) {
                try {
                    getData();
                } catch (java.lang.NullPointerException e) {
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_V) {
                if (tbPersalinan.getSelectedColumn() > 4) {
                    if (tbPersalinan.getSelectedRow() != -1) {
                        if (tbPersalinan.getValueAt(tbPersalinan.getSelectedRow(), tbPersalinan.getSelectedColumn()).toString().equals("false")) {
                            tbPersalinan.setValueAt(true, tbPersalinan.getSelectedRow(), tbPersalinan.getSelectedColumn());
                        } else {
                            tbPersalinan.setValueAt(false, tbPersalinan.getSelectedRow(), tbPersalinan.getSelectedColumn());
                        }
                    }
                }
            }
        }
}//GEN-LAST:event_tbPersalinanKeyPressed

private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
    isForm();
    rPersalinanNormal.requestFocus();
}//GEN-LAST:event_ChkInputActionPerformed

    private void MnPrinDataPersalinanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnPrinDataPersalinanActionPerformed
        cekData = 0;
        cekData = Sequel.cariInteger("SELECT count(1) cek FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki ON ki.no_rawat = r.no_rawat "
                + "INNER JOIN kamar k ON k.kd_kamar = ki.kd_kamar INNER JOIN bangsal b ON b.kd_bangsal = k.kd_bangsal "
                + "INNER JOIN penjab pj ON pj.kd_pj = r.kd_pj LEFT JOIN dpjp_ranap dr ON dr.no_rawat = ki.no_rawat LEFT JOIN dokter d ON d.kd_dokter = dr.kd_dokter "
                + "WHERE ki.stts_pulang not in ('-','pindah kamar') and d.nm_dokter like '%" + cmbDokter.getSelectedItem() + "%' and "
                + "r.tgl_registrasi BETWEEN '" + Valid.SetTgl(DTPCari1.getSelectedItem() + "") + "' AND '" + Valid.SetTgl(DTPCari2.getSelectedItem() + "") + "'");
        
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Data persalinan tidak ada...!!!!");
            DTPCari1.requestFocus();
        } else if (cekData == 0) {
            JOptionPane.showMessageDialog(null, "Data persalinan tidak ditemukan, cek lagi pilihan tgl. rawatnya...!!!!");
            DTPCari1.requestFocus();
        } else {
            this.setCursor(Cursor.getDefaultCursor());
            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("logo", Sequel.cariGambar("select logo from setting"));
            param.put("periode", "Periode Tgl. Masuk RS. " + DTPCari1.getSelectedItem() + " s.d " + DTPCari2.getSelectedItem());
            Valid.MyReport("rptDataPersalinan.jasper", "report", "::[ Data Persalinan Pasien ]::",
                    " SELECT ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, "
                    + "ds.jns_persalinan, ds.rujukan, pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, "
                    + "DATE_FORMAT(ki.tgl_keluar, '%d-%m-%Y') tgl_plng, ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp "
                    + "FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                    + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki ON ki.no_rawat = r.no_rawat "
                    + "INNER JOIN kamar k ON k.kd_kamar = ki.kd_kamar INNER JOIN bangsal b ON b.kd_bangsal = k.kd_bangsal "
                    + "INNER JOIN penjab pj ON pj.kd_pj = r.kd_pj LEFT JOIN dpjp_ranap dr ON dr.no_rawat = ki.no_rawat "
                    + "LEFT JOIN dokter d ON d.kd_dokter = dr.kd_dokter WHERE ki.stts_pulang not in ('-','pindah kamar') and d.nm_dokter like '%" + cmbDokter.getSelectedItem() + "%' and "
                    + "r.tgl_registrasi BETWEEN '" + Valid.SetTgl(DTPCari1.getSelectedItem() + "") + "' AND '" + Valid.SetTgl(DTPCari2.getSelectedItem() + "") + "' "
                    + "ORDER BY r.tgl_registrasi, r.jam_reg, dpjp", param);
            this.setCursor(Cursor.getDefaultCursor());
            
            tampil();
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_MnPrinDataPersalinanActionPerformed

    private void BtnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHapusActionPerformed
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Data pada tabel masih kosong...!!!!");
            DTPCari1.requestFocus();
        } else if (norawat.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Pilih salah satu dulu data pasiennya pada tabel...!!!!");
            tbPersalinan.requestFocus();
        } else {
            Sequel.meghapus("data_persalinan", "no_rawat", norawat.getText());
            
            emptForm();
            tampil();
        }
    }//GEN-LAST:event_BtnHapusActionPerformed

    private void BtnHapusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnHapusKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnHapusActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnBatal, BtnGanti);
        }
    }//GEN-LAST:event_BtnHapusKeyPressed

    private void MnPrinRekapTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnPrinRekapTotalActionPerformed
        cekData = 0;
        cekData = Sequel.cariInteger("SELECT COUNT(1) cek FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat "
                + "INNER JOIN kamar_inap ki ON ki.no_rawat = r.no_rawat INNER JOIN kamar k ON k.kd_kamar = ki.kd_kamar INNER JOIN bangsal b ON b.kd_bangsal = k.kd_bangsal  "
                + "INNER JOIN penjab pj ON pj.kd_pj = r.kd_pj LEFT JOIN dpjp_ranap dr ON dr.no_rawat = ki.no_rawat LEFT JOIN dokter d ON d.kd_dokter = dr.kd_dokter "
                + "WHERE ki.stts_pulang not in ('-','pindah kamar') and d.nm_dokter like '%" + cmbDokter.getSelectedItem() + "%' and "
                + "r.tgl_registrasi BETWEEN '" + Valid.SetTgl(DTPCari1.getSelectedItem() + "") + "' AND '" + Valid.SetTgl(DTPCari2.getSelectedItem() + "") + "'");
        
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Data persalinan tidak ada...!!!!");
            DTPCari1.requestFocus();
        } else if (cekData == 0) {
            JOptionPane.showMessageDialog(null, "Data persalinan tidak ditemukan, cek lagi pilihan tgl. rawatnya...!!!!");
            DTPCari1.requestFocus();
        } else {
            this.setCursor(Cursor.getDefaultCursor());
            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("logo", Sequel.cariGambar("select logo from setting"));
            param.put("periode", "Periode Tgl. Masuk RS. " + DTPCari1.getSelectedItem() + " s.d " + DTPCari2.getSelectedItem());
            if (cmbDokter.getSelectedIndex() == 0 || cmbDokter.getSelectedIndex() == 1) {
                param.put("dokter", "Oleh Semua Dokter Spesialis");
                Valid.MyReport("rptRekapTotalPersalinan.jasper", "report", "::[ Rekap Total Data Persalinan Pasien ]::",
                        " SELECT ds.jns_persalinan, pj.png_jawab, COUNT(*) jumlah FROM data_persalinan ds "
                        + "INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat "
                        + "INNER JOIN kamar_inap ki ON ki.no_rawat = r.no_rawat INNER JOIN kamar k ON k.kd_kamar = ki.kd_kamar "
                        + "INNER JOIN bangsal b ON b.kd_bangsal = k.kd_bangsal INNER JOIN penjab pj ON pj.kd_pj = r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr ON dr.no_rawat = ki.no_rawat LEFT JOIN dokter d ON d.kd_dokter = dr.kd_dokter "
                        + "WHERE ki.stts_pulang not in ('-','pindah kamar') and "
                        + "r.tgl_registrasi BETWEEN '" + Valid.SetTgl(DTPCari1.getSelectedItem() + "") + "' AND '" + Valid.SetTgl(DTPCari2.getSelectedItem() + "") + "' "
                        + "GROUP BY ds.jns_persalinan, r.kd_pj ORDER BY ds.jns_persalinan ASC, jumlah DESC", param);
            } else {
                param.put("dokter", "Oleh Dokter Spesialis : " + cmbDokter.getSelectedItem());
                Valid.MyReport("rptRekapTotalPersalinan.jasper", "report", "::[ Rekap Total Data Persalinan Pasien ]::",
                        " SELECT ds.jns_persalinan, pj.png_jawab, COUNT(*) jumlah FROM data_persalinan ds "
                        + "INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat "
                        + "INNER JOIN kamar_inap ki ON ki.no_rawat = r.no_rawat INNER JOIN kamar k ON k.kd_kamar = ki.kd_kamar "
                        + "INNER JOIN bangsal b ON b.kd_bangsal = k.kd_bangsal INNER JOIN penjab pj ON pj.kd_pj = r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr ON dr.no_rawat = ki.no_rawat LEFT JOIN dokter d ON d.kd_dokter = dr.kd_dokter "
                        + "WHERE ki.stts_pulang not in ('-','pindah kamar') and d.nm_dokter like '%" + cmbDokter.getSelectedItem() + "%' and "
                        + "r.tgl_registrasi BETWEEN '" + Valid.SetTgl(DTPCari1.getSelectedItem() + "") + "' AND '" + Valid.SetTgl(DTPCari2.getSelectedItem() + "") + "' "
                        + "GROUP BY ds.jns_persalinan, r.kd_pj ORDER BY ds.jns_persalinan ASC, jumlah DESC", param);
            }
            this.setCursor(Cursor.getDefaultCursor());
            
            tampil();
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_MnPrinRekapTotalActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Sequel.cariIsiComboDB("select nm_dokter from dokter where kd_sps='S0012' order by nm_dokter", cmbDokter);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgPasienPersalinan dialog = new DlgPasienPersalinan(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnBatal;
    private widget.Button BtnCari;
    public widget.Button BtnGanti;
    private widget.Button BtnHapus;
    private widget.Button BtnKeluar;
    public widget.Button BtnSimpan;
    public widget.CekBox ChkInput;
    private widget.Tanggal DTPCari1;
    private widget.Tanggal DTPCari2;
    private widget.TextBox FixPersalinan;
    private widget.TextBox FixRujukan;
    private widget.PanelBiasa FormInput;
    private widget.Label LCount;
    private javax.swing.JMenuItem MnPrinDataPersalinan;
    private javax.swing.JMenuItem MnPrinRekapTotal;
    private javax.swing.JPanel PanelInput;
    private widget.ScrollPane Scroll;
    public widget.TextBox TCari;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private widget.ComboBox cmbDokter;
    private widget.ComboBox cmbLimit;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel48;
    private widget.Label jLabel5;
    private widget.Label jLabel6;
    private widget.Label jLabel63;
    private widget.Label jLabel64;
    private widget.Label jLabel7;
    private widget.Label jLabel8;
    private widget.Label jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private widget.TextBox namapasien;
    public widget.TextBox norawat;
    private widget.TextBox norm;
    private widget.panelisi panelGlass10;
    private widget.panelisi panelGlass8;
    private widget.RadioButton rAbortus;
    private widget.RadioButton rAmniotomy;
    private widget.RadioButton rBidan;
    private widget.RadioButton rEklamsi;
    private widget.RadioButton rFaskes;
    private widget.RadioButton rImunisasi1;
    private widget.RadioButton rImunisasi2;
    private widget.RadioButton rInfeksi;
    private widget.RadioButton rLainlain;
    private widget.RadioButton rNonMedis;
    private widget.RadioButton rOPLaparatomi;
    private widget.RadioButton rPartusPenyulit;
    private widget.RadioButton rPerawatanKonservatif;
    private widget.RadioButton rPerdarahanSebelum;
    private widget.RadioButton rPerdarahanSesudah;
    private widget.RadioButton rPersalinanNormal;
    private widget.RadioButton rPreEklamsi;
    private widget.RadioButton rPuskes;
    private widget.RadioButton rRS;
    private widget.RadioButton rSC;
    private widget.RadioButton rSCMOW;
    private widget.RadioButton rTanpaRujukan;
    private widget.RadioButton rVacumExtraksi;
    private widget.Table tbPersalinan;
    // End of variables declaration//GEN-END:variables

    private void getData() {
        if (tbPersalinan.getSelectedRow() != -1) {
            norawat.setText(tbPersalinan.getValueAt(tbPersalinan.getSelectedRow(), 0).toString());
            norm.setText(tbPersalinan.getValueAt(tbPersalinan.getSelectedRow(), 1).toString());
            Sequel.cariIsi("select nm_pasien from pasien where no_rkm_medis=? ", namapasien, norm.getText());
            FixPersalinan.setText(tbPersalinan.getValueAt(tbPersalinan.getSelectedRow(), 3).toString());
            FixRujukan.setText(tbPersalinan.getValueAt(tbPersalinan.getSelectedRow(), 4).toString());
            
            BtnSimpan.setEnabled(false);
            BtnGanti.setEnabled(true);
            
            if (FixPersalinan.getText().equals("Persalinan Normal")) {
                rPersalinanNormal.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Amniotomy")) {
                rAmniotomy.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Partus Penyulit")) {
                rPartusPenyulit.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Vacum Extraksi")) {
                rVacumExtraksi.setSelected(true);                
            } else if (FixPersalinan.getText().equals("SC + MOW")) {
                rSCMOW.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Sectio Caesarean (SC)")) {
                rSC.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Perdarahan Sebelum Persalinan")) {
                rPerdarahanSebelum.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Perdarahan Sesudah Persalinan")) {
                rPerdarahanSesudah.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Pre Eclampsi")) {
                rPreEklamsi.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Eclampsi")) {
                rEklamsi.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Infeksi")) {
                rInfeksi.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Lain-lain")) {
                rLainlain.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Abortus")) {
                rAbortus.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Imunisasi-TT1")) {
                rImunisasi1.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Imunisasi-TT2")) {
                rImunisasi2.setSelected(true);                
            } else if (FixPersalinan.getText().equals("OP Laparatomi")) {
                rOPLaparatomi.setSelected(true);                
            } else if (FixPersalinan.getText().equals("Perawatan / Konservatif")) {
                rPerawatanKonservatif.setSelected(true);
            }
            
            if (FixRujukan.getText().equals("Rumah Sakit")) {
                rRS.setSelected(true);                
            } else if (FixRujukan.getText().equals("Bidan")) {
                rBidan.setSelected(true);                
            } else if (FixRujukan.getText().equals("Puskesmas")) {
                rPuskes.setSelected(true);                
            } else if (FixRujukan.getText().equals("Faskes Lainnya")) {
                rFaskes.setSelected(true);                
            } else if (FixRujukan.getText().equals("Non Medis")) {
                rNonMedis.setSelected(true);
            } else if (FixRujukan.getText().equals("Tanpa Rujukan")) {
                rTanpaRujukan.setSelected(true);
            }
        }
    }
    
    public void isForm() {
        if (ChkInput.isSelected() == true) {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 280));
            FormInput.setVisible(true);
            ChkInput.setVisible(true);
        } else if (ChkInput.isSelected() == false) {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 20));
            FormInput.setVisible(false);
            ChkInput.setVisible(true);
        }
    }
    
    public void emptPersalinan() {
        norawat.setText("");
        norm.setText("");
        namapasien.setText("");
        stsPulang = "";
        cmbDokter.setSelectedIndex(0);
        
        rPersalinanNormal.setSelected(false);
        rAmniotomy.setSelected(false);
        rPartusPenyulit.setSelected(false);
        rVacumExtraksi.setSelected(false);
        rSCMOW.setSelected(false);
        rSC.setSelected(false);
        rPerdarahanSebelum.setSelected(false);
        rPerdarahanSesudah.setSelected(false);
        rPreEklamsi.setSelected(false);
        rEklamsi.setSelected(false);
        rInfeksi.setSelected(false);
        rLainlain.setSelected(false);
        rAbortus.setSelected(false);
        rImunisasi1.setSelected(false);
        rImunisasi2.setSelected(false);        
        rOPLaparatomi.setSelected(false);
        rPerawatanKonservatif.setSelected(false);
        
        rRS.setSelected(false);
        rBidan.setSelected(false);
        rPuskes.setSelected(false);
        rFaskes.setSelected(false);
        rNonMedis.setSelected(false);
        rTanpaRujukan.setSelected(false);
        TCari.setText("");
    }
    
    public void emptForm() {
        norawat.setText("");
        norm.setText("");
        namapasien.setText("");
        
        rPersalinanNormal.setSelected(false);
        rAmniotomy.setSelected(false);
        rPartusPenyulit.setSelected(false);
        rVacumExtraksi.setSelected(false);
        rSCMOW.setSelected(false);
        rSC.setSelected(false);
        rPerdarahanSebelum.setSelected(false);
        rPerdarahanSesudah.setSelected(false);
        rPreEklamsi.setSelected(false);
        rEklamsi.setSelected(false);
        rInfeksi.setSelected(false);
        rLainlain.setSelected(false);
        rAbortus.setSelected(false);
        rImunisasi1.setSelected(false);
        rImunisasi2.setSelected(false);
        rOPLaparatomi.setSelected(false);
        rPerawatanKonservatif.setSelected(false);
        
        rRS.setSelected(false);
        rBidan.setSelected(false);
        rPuskes.setSelected(false);
        rFaskes.setSelected(false);
        rNonMedis.setSelected(false);
        rTanpaRujukan.setSelected(false);
    }
    
    public void tampil() {
        Valid.tabelKosong(tabMode);
        try {
            if (cmbLimit.getSelectedItem().toString().equals("Semua") && stsPulang.equals("")) {
                ps = koneksi.prepareStatement("SELECT ds.no_rawat, ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, ds.jns_persalinan, ds.rujukan, "
                        + "pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, DATE_FORMAT(ki.tgl_keluar,'%d-%m-%Y') tgl_plng, "
                        + "ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                        + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki on ki.no_rawat=r.no_rawat "
                        + "INNER JOIN kamar k on k.kd_kamar=ki.kd_kamar INNER JOIN bangsal b on b.kd_bangsal=k.kd_bangsal INNER JOIN penjab pj on pj.kd_pj=r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr on dr.no_rawat=ki.no_rawat LEFT JOIN dokter d on d.kd_dokter=dr.kd_dokter WHERE "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rawat like ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rkm_medis LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.jns_persalinan LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.rujukan LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and p.nm_pasien LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and pj.png_jawab LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and b.nm_bangsal LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ki.stts_pulang LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and d.nm_dokter LIKE ? ORDER BY ds.no_rawat DESC");
                
            } else if (!cmbLimit.getSelectedItem().toString().equals("Semua") && stsPulang.equals("")) {
                ps = koneksi.prepareStatement("SELECT ds.no_rawat, ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, ds.jns_persalinan, ds.rujukan, "
                        + "pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, DATE_FORMAT(ki.tgl_keluar,'%d-%m-%Y') tgl_plng, "
                        + "ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                        + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki on ki.no_rawat=r.no_rawat "
                        + "INNER JOIN kamar k on k.kd_kamar=ki.kd_kamar INNER JOIN bangsal b on b.kd_bangsal=k.kd_bangsal INNER JOIN penjab pj on pj.kd_pj=r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr on dr.no_rawat=ki.no_rawat LEFT JOIN dokter d on d.kd_dokter=dr.kd_dokter WHERE "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rawat like ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rkm_medis LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.jns_persalinan LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.rujukan LIKE ? OR "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and p.nm_pasien LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and pj.png_jawab LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and b.nm_bangsal LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ki.stts_pulang LIKE ? or "
                        + "ki.stts_pulang not in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and d.nm_dokter LIKE ? "
                        + "ORDER BY ds.no_rawat DESC limit " + cmbLimit.getSelectedItem() + "");                
            }

            //--------- dengan validasi status pulang rawat inap            
            if ((stsPulang.equals("-") || stsPulang.equals("Pindah Kamar")) && cmbLimit.getSelectedItem().toString().equals("Semua")) {
                ps = koneksi.prepareStatement("SELECT ds.no_rawat, ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, ds.jns_persalinan, ds.rujukan, "
                        + "pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, DATE_FORMAT(ki.tgl_keluar,'%d-%m-%Y') tgl_plng, "
                        + "ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                        + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki on ki.no_rawat=r.no_rawat "
                        + "INNER JOIN kamar k on k.kd_kamar=ki.kd_kamar INNER JOIN bangsal b on b.kd_bangsal=k.kd_bangsal INNER JOIN penjab pj on pj.kd_pj=r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr on dr.no_rawat=ki.no_rawat LEFT JOIN dokter d on d.kd_dokter=dr.kd_dokter WHERE "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rawat like ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rkm_medis LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.jns_persalinan LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.rujukan LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and p.nm_pasien LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and pj.png_jawab LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and b.nm_bangsal LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ki.stts_pulang LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and d.nm_dokter LIKE ? ORDER BY ds.no_rawat DESC");
                
            } else if ((stsPulang.equals("-") || stsPulang.equals("Pindah Kamar")) && !cmbLimit.getSelectedItem().toString().equals("Semua")) {
                ps = koneksi.prepareStatement("SELECT ds.no_rawat, ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, ds.jns_persalinan, ds.rujukan, "
                        + "pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, DATE_FORMAT(ki.tgl_keluar,'%d-%m-%Y') tgl_plng, "
                        + "ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                        + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki on ki.no_rawat=r.no_rawat "
                        + "INNER JOIN kamar k on k.kd_kamar=ki.kd_kamar INNER JOIN bangsal b on b.kd_bangsal=k.kd_bangsal INNER JOIN penjab pj on pj.kd_pj=r.kd_pj "
                        + "LEFT JOIN dpjp_ranap dr on dr.no_rawat=ki.no_rawat LEFT JOIN dokter d on d.kd_dokter=dr.kd_dokter WHERE "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rawat like ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.no_rkm_medis LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.jns_persalinan LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ds.rujukan LIKE ? OR "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and p.nm_pasien LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and pj.png_jawab LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and b.nm_bangsal LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and ki.stts_pulang LIKE ? or "
                        + "ki.stts_pulang in ('-','pindah kamar') and r.tgl_registrasi between ? and ? and d.nm_dokter like ? and d.nm_dokter LIKE ? "
                        + "ORDER BY ds.no_rawat DESC limit " + cmbLimit.getSelectedItem() + "");
            }
            
            try {
                ps.setString(1, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(2, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(3, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(4, "%" + TCari.getText().trim() + "%");
                ps.setString(5, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(6, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(7, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(8, "%" + TCari.getText().trim() + "%");                
                ps.setString(9, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(10, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(11, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(12, "%" + TCari.getText().trim() + "%");                
                ps.setString(13, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(14, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(15, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(16, "%" + TCari.getText().trim() + "%");                
                ps.setString(17, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(18, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(19, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(20, "%" + TCari.getText().trim() + "%");                
                ps.setString(21, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(22, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(23, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(24, "%" + TCari.getText().trim() + "%");                
                ps.setString(25, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(26, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(27, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(28, "%" + TCari.getText().trim() + "%");                
                ps.setString(29, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(30, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(31, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(32, "%" + TCari.getText().trim() + "%");                
                ps.setString(33, Valid.SetTgl(DTPCari1.getSelectedItem() + ""));
                ps.setString(34, Valid.SetTgl(DTPCari2.getSelectedItem() + ""));
                ps.setString(35, "%" + cmbDokter.getSelectedItem() + "%");
                ps.setString(36, "%" + TCari.getText().trim() + "%");
                rs = ps.executeQuery();
                while (rs.next()) {
                    tabMode.addRow(new Object[]{
                        rs.getString("no_rawat"),
                        rs.getString("no_rkm_medis"),
                        rs.getString("pasien"),
                        rs.getString("jns_persalinan"),
                        rs.getString("rujukan"),
                        rs.getString("png_jawab"),
                        rs.getString("nm_bangsal"),
                        rs.getString("tgl_msk"),
                        rs.getString("tgl_plng"),
                        rs.getString("stts_pulang"),
                        rs.getString("dpjp")
                    });
                }
            } catch (Exception e) {
                System.out.println("simrskhanza.DlgPasienPersalinan.tampil() : " + e);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabMode.getRowCount());        
    }
    
    public void isCek() {
        BtnSimpan.setEnabled(akses.getdata_persalinan());
        BtnGanti.setEnabled(akses.getdata_persalinan());
        MnPrinDataPersalinan.setEnabled(akses.getdata_persalinan());
        
        if (akses.getkode().equals("Admin Utama")) {
            BtnHapus.setEnabled(true);
        } else {
            BtnHapus.setEnabled(false);
        }
    }
    
    public void tampilSatuPersalinan() {
        Valid.tabelKosong(tabMode);
        try {
            ps1 = koneksi.prepareStatement("SELECT ds.no_rawat, ds.no_rkm_medis, CONCAT(p.nm_pasien,' (',r.umurdaftar,' ',r.sttsumur,'.)') pasien, ds.jns_persalinan, ds.rujukan, "
                    + "pj.png_jawab, b.nm_bangsal, DATE_FORMAT(r.tgl_registrasi,'%d-%m-%Y') tgl_msk, DATE_FORMAT(ki.tgl_keluar,'%d-%m-%Y') tgl_plng, "
                    + "ki.stts_pulang, IFNULL(d.nm_dokter,'- Belum Ditentukan -') dpjp FROM data_persalinan ds INNER JOIN pasien p ON p.no_rkm_medis = ds.no_rkm_medis "
                    + "INNER JOIN reg_periksa r ON r.no_rawat = ds.no_rawat INNER JOIN kamar_inap ki on ki.no_rawat=r.no_rawat "
                    + "INNER JOIN kamar k on k.kd_kamar=ki.kd_kamar INNER JOIN bangsal b on b.kd_bangsal=k.kd_bangsal INNER JOIN penjab pj on pj.kd_pj=r.kd_pj "
                    + "LEFT JOIN dpjp_ranap dr on dr.no_rawat=ki.no_rawat LEFT JOIN dokter d on d.kd_dokter=dr.kd_dokter WHERE ds.no_rawat='" + norawat.getText() + "'");
            
            try {
                rs1 = ps1.executeQuery();
                while (rs1.next()) {
                    tabMode.addRow(new Object[]{
                        rs1.getString("no_rawat"),
                        rs1.getString("no_rkm_medis"),
                        rs1.getString("pasien"),
                        rs1.getString("jns_persalinan"),
                        rs1.getString("rujukan"),
                        rs1.getString("png_jawab"),
                        rs1.getString("nm_bangsal"),
                        rs1.getString("tgl_msk"),
                        rs1.getString("tgl_plng"),
                        rs1.getString("stts_pulang"),
                        rs1.getString("dpjp")
                    });
                }
            } catch (Exception e) {
                System.out.println("simrskhanza.DlgPasienPersalinan.tampilSatuPersalinan() : " + e);
            } finally {
                if (rs1 != null) {
                    rs1.close();
                }
                if (ps1 != null) {
                    ps1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabMode.getRowCount());
    }
    
    public void setPasien(String norw, String noRM, String tglMsk, String statusPlg) {
        norawat.setText(norw);
        norm.setText(noRM);
        Valid.SetTgl(DTPCari1, tglMsk);
        stsPulang = statusPlg;
        namapasien.setText(Sequel.cariIsi("select nm_pasien from pasien where no_rkm_medis='" + noRM + "'"));
    }
    
    private void DataFix() {
        FixPersalinan.setText("");
        FixRujukan.setText("");
        
        if (rPersalinanNormal.isSelected() == true) {
            FixPersalinan.setText(rPersalinanNormal.getText());
        } else if (rAmniotomy.isSelected() == true) {
            FixPersalinan.setText(rAmniotomy.getText());            
        } else if (rPartusPenyulit.isSelected() == true) {
            FixPersalinan.setText(rPartusPenyulit.getText());            
        } else if (rVacumExtraksi.isSelected() == true) {
            FixPersalinan.setText(rVacumExtraksi.getText());            
        } else if (rSCMOW.isSelected() == true) {
            FixPersalinan.setText(rSCMOW.getText());            
        } else if (rSC.isSelected() == true) {
            FixPersalinan.setText(rSC.getText());            
        } else if (rPerdarahanSebelum.isSelected() == true) {
            FixPersalinan.setText(rPerdarahanSebelum.getText());            
        } else if (rPerdarahanSesudah.isSelected() == true) {
            FixPersalinan.setText(rPerdarahanSesudah.getText());            
        } else if (rPreEklamsi.isSelected() == true) {
            FixPersalinan.setText(rPreEklamsi.getText());            
        } else if (rEklamsi.isSelected() == true) {
            FixPersalinan.setText(rEklamsi.getText());            
        } else if (rInfeksi.isSelected() == true) {
            FixPersalinan.setText(rInfeksi.getText());            
        } else if (rLainlain.isSelected() == true) {
            FixPersalinan.setText(rLainlain.getText());            
        } else if (rAbortus.isSelected() == true) {
            FixPersalinan.setText(rAbortus.getText());            
        } else if (rImunisasi1.isSelected() == true) {
            FixPersalinan.setText(rImunisasi1.getText());            
        } else if (rImunisasi2.isSelected() == true) {
            FixPersalinan.setText(rImunisasi2.getText());            
        } else if (rOPLaparatomi.isSelected() == true) {
            FixPersalinan.setText(rOPLaparatomi.getText());            
        } else if (rPerawatanKonservatif.isSelected() == true) {
            FixPersalinan.setText(rPerawatanKonservatif.getText());            
        }
        
        if (rRS.isSelected() == true) {
            FixRujukan.setText(rRS.getText());            
        } else if (rBidan.isSelected() == true) {
            FixRujukan.setText(rBidan.getText());            
        } else if (rPuskes.isSelected() == true) {
            FixRujukan.setText(rPuskes.getText());            
        } else if (rFaskes.isSelected() == true) {
            FixRujukan.setText(rFaskes.getText());            
        } else if (rNonMedis.isSelected() == true) {
            FixRujukan.setText(rNonMedis.getText());            
        } else if (rTanpaRujukan.isSelected() == true) {
            FixRujukan.setText(rTanpaRujukan.getText());            
        }        
    }
    
}
