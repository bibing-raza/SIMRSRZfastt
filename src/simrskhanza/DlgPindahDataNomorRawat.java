package simrskhanza;

import rekammedis.*;
import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author dosen
 */
public class DlgPindahDataNomorRawat extends javax.swing.JDialog {
    private final DefaultTableModel tabMode, tabMode1;
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private Properties prop = new Properties();
    private PreparedStatement psKos, psFar, psRad, psLab, psDok, psPet, psDP, psDH,
            psKos1, psFar1, psRad1, psLab1, psDok1, psPet1, psDP1, psDH1;
    private ResultSet rsKos, rsFar, rsRad, rsLab, rsDok, rsPet, rsDP, rsDH,
            rsKos1, rsFar1, rsRad1, rsLab1, rsDok1, rsPet1, rsDP1, rsDH1;
    private int i = 0, x = 0;
    
    /** Creates new form DlgPemberianInfus
     * @param parent
     * @param modal */
    public DlgPindahDataNomorRawat(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tabMode=new DefaultTableModel(null,new Object[]{
            "No. Rawat", "Tgl. Tran./Data", "Jam Trans./Data", "Uraian Transaksi/Data"}) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        
        tbDipilih.setModel(tabMode);
        tbDipilih.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbDipilih.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 4; i++) {
            TableColumn column = tbDipilih.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(110);
            } else if (i == 1) {
                column.setPreferredWidth(90);
            } else if (i == 2) {
                column.setPreferredWidth(90);
            } else if (i == 3) {
                column.setPreferredWidth(450);
            }
        }
        tbDipilih.setDefaultRenderer(Object.class, new WarnaTable());
        
        tabMode1=new DefaultTableModel(null,new Object[]{
            "No. Rawat", "Tgl. Tran./Data", "Jam Trans./Data", "Uraian Transaksi/Data"}) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        
        tbTujuan.setModel(tabMode1);
        tbTujuan.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbTujuan.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 4; i++) {
            TableColumn column = tbTujuan.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(110);
            } else if (i == 1) {
                column.setPreferredWidth(90);
            } else if (i == 2) {
                column.setPreferredWidth(90);
            } else if (i == 3) {
                column.setPreferredWidth(450);
            }
        }
        tbTujuan.setDefaultRenderer(Object.class, new WarnaTable());
        
        TNoRwTujuan.setDocument(new batasInput((byte) 17).getKata(TNoRwTujuan));
        tglDari.setDocument(new batasInput((byte) 10).getKata(tglDari));
        pukulDari.setDocument(new batasInput((byte) 8).getKata(pukulDari));
        
        ChkInput.setSelected(false);
        isForm();
    }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        PanelInput = new javax.swing.JPanel();
        ChkInput = new widget.CekBox();
        FormInput = new widget.PanelBiasa();
        jLabel63 = new widget.Label();
        TNoRwTerpilih = new widget.TextBox();
        pasienTerpilih = new widget.TextBox();
        jLabel64 = new widget.Label();
        TRgRawatTerpilih = new widget.TextBox();
        jLabel65 = new widget.Label();
        TNoRwTujuan = new widget.TextBox();
        jLabel66 = new widget.Label();
        TRgRawatTujuan = new widget.TextBox();
        jLabel67 = new widget.Label();
        ChkRMranap = new widget.CekBox();
        ChkRMigd = new widget.CekBox();
        jLabel108 = new widget.Label();
        cmbJnsTran = new widget.ComboBox();
        jLabel107 = new widget.Label();
        tglDari = new widget.TextBox();
        jLabel110 = new widget.Label();
        pukulDari = new widget.TextBox();
        ChkTglTran = new widget.CekBox();
        BtnRgTujuan = new widget.Button();
        internalFrame2 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbDipilih = new widget.Table();
        Scroll1 = new widget.ScrollPane();
        tbTujuan = new widget.Table();
        panelGlass8 = new widget.panelisi();
        BtnCekData = new widget.Button();
        BtnProsesData = new widget.Button();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255), 3), "::[ Pindah Data Ke Nomor Rawat Tujuan ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(192, 235));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        ChkInput.setForeground(new java.awt.Color(0, 0, 0));
        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('M');
        ChkInput.setText(".: Input Data");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setName("ChkInput"); // NOI18N
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(190, 107));
        FormInput.setLayout(null);

        jLabel63.setForeground(new java.awt.Color(0, 0, 0));
        jLabel63.setText("No. Rawat Terpilih : ");
        jLabel63.setName("jLabel63"); // NOI18N
        FormInput.add(jLabel63);
        jLabel63.setBounds(0, 10, 150, 23);

        TNoRwTerpilih.setEditable(false);
        TNoRwTerpilih.setForeground(new java.awt.Color(0, 0, 0));
        TNoRwTerpilih.setName("TNoRwTerpilih"); // NOI18N
        TNoRwTerpilih.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(TNoRwTerpilih);
        TNoRwTerpilih.setBounds(152, 10, 125, 23);

        pasienTerpilih.setEditable(false);
        pasienTerpilih.setForeground(new java.awt.Color(0, 0, 0));
        pasienTerpilih.setHighlighter(null);
        pasienTerpilih.setName("pasienTerpilih"); // NOI18N
        pasienTerpilih.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(pasienTerpilih);
        pasienTerpilih.setBounds(280, 10, 295, 23);

        jLabel64.setForeground(new java.awt.Color(0, 0, 0));
        jLabel64.setText("Rg. Rawat Terpilih : ");
        jLabel64.setName("jLabel64"); // NOI18N
        FormInput.add(jLabel64);
        jLabel64.setBounds(0, 38, 150, 23);

        TRgRawatTerpilih.setEditable(false);
        TRgRawatTerpilih.setForeground(new java.awt.Color(0, 0, 0));
        TRgRawatTerpilih.setName("TRgRawatTerpilih"); // NOI18N
        TRgRawatTerpilih.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(TRgRawatTerpilih);
        TRgRawatTerpilih.setBounds(152, 38, 423, 23);

        jLabel65.setForeground(new java.awt.Color(0, 0, 0));
        jLabel65.setText("No. Rawat Tujuan : ");
        jLabel65.setName("jLabel65"); // NOI18N
        FormInput.add(jLabel65);
        jLabel65.setBounds(0, 66, 150, 23);

        TNoRwTujuan.setForeground(new java.awt.Color(0, 0, 0));
        TNoRwTujuan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        TNoRwTujuan.setName("TNoRwTujuan"); // NOI18N
        TNoRwTujuan.setPreferredSize(new java.awt.Dimension(135, 23));
        TNoRwTujuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TNoRwTujuanKeyPressed(evt);
            }
        });
        FormInput.add(TNoRwTujuan);
        TNoRwTujuan.setBounds(152, 66, 180, 23);

        jLabel66.setForeground(new java.awt.Color(0, 0, 0));
        jLabel66.setText("Rg. Rawat Tujuan : ");
        jLabel66.setName("jLabel66"); // NOI18N
        FormInput.add(jLabel66);
        jLabel66.setBounds(0, 94, 150, 23);

        TRgRawatTujuan.setEditable(false);
        TRgRawatTujuan.setForeground(new java.awt.Color(0, 0, 0));
        TRgRawatTujuan.setName("TRgRawatTujuan"); // NOI18N
        TRgRawatTujuan.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(TRgRawatTujuan);
        TRgRawatTujuan.setBounds(152, 94, 423, 23);

        jLabel67.setForeground(new java.awt.Color(0, 0, 0));
        jLabel67.setText("RME Yang Dipindah : ");
        jLabel67.setName("jLabel67"); // NOI18N
        FormInput.add(jLabel67);
        jLabel67.setBounds(0, 122, 150, 23);

        ChkRMranap.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 250)));
        ChkRMranap.setForeground(new java.awt.Color(0, 0, 0));
        ChkRMranap.setText("Semua Rekam Medis RAWAT INAP");
        ChkRMranap.setBorderPainted(true);
        ChkRMranap.setBorderPaintedFlat(true);
        ChkRMranap.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkRMranap.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkRMranap.setName("ChkRMranap"); // NOI18N
        ChkRMranap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkRMranapActionPerformed(evt);
            }
        });
        FormInput.add(ChkRMranap);
        ChkRMranap.setBounds(152, 122, 210, 23);

        ChkRMigd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 250)));
        ChkRMigd.setForeground(new java.awt.Color(0, 0, 0));
        ChkRMigd.setText("Semua Rekam Medis IGD");
        ChkRMigd.setBorderPainted(true);
        ChkRMigd.setBorderPaintedFlat(true);
        ChkRMigd.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkRMigd.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkRMigd.setName("ChkRMigd"); // NOI18N
        ChkRMigd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkRMigdActionPerformed(evt);
            }
        });
        FormInput.add(ChkRMigd);
        ChkRMigd.setBounds(380, 122, 160, 23);

        jLabel108.setForeground(new java.awt.Color(0, 0, 0));
        jLabel108.setText("RME/Jenis Tran. Dipilih : ");
        jLabel108.setName("jLabel108"); // NOI18N
        FormInput.add(jLabel108);
        jLabel108.setBounds(0, 150, 150, 23);

        cmbJnsTran.setForeground(new java.awt.Color(0, 0, 0));
        cmbJnsTran.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "FARMASI", "RADIOLOGI", "LABORATORIUM", "PENANGANAN DOKTER", "PENANGANAN PETUGAS", "PENANGANAN DOKTER & PETUGAS", "DIET HARIAN", "ASESMEN MEDIK DEWASA RAWAT INAP", "ASESMEN KEPERAWATAN DEWASA RAWAT INAP", "CPPT RAWAT INAP", "CPPT IGD", "CATATAN RESEP RAWAT INAP", "CATATAN RESEP IGD", "RINGKASAN PULANG RAWAT INAP", "TRANSFER SERAH TERIMA RAWAT INAP", "TRANSFER SERAH TERIMA IGD", "CATATAN TINDAKAN KEPERAWATAN RAWAT INAP", "JADWAL PEMBERIAN OBAT RAWAT INAP", "JADWAL PEMBERIAN OBAT IGD", "KONSUL ANTAR UNIT RAWAT INAP", "DATA PERSALINAN", "SPIROMETRI", "SURAT ISTIRAHAT SAKIT RAWAT INAP", "SURAT ISTIRAHAT SAKIT IGD", "SURAT KETERANGAN SAKIT RAWAT INAP", "SURAT KETERANGAN SAKIT IGD", "DPJP RAWAT INAP", "PERMINTAAN PERIKSA LAB.", "PERMINTAAN PERIKSA RADIOLOGI", "PEMANTAUAN HARIAN PASIEN RAWAT INAP", "TRIASE IGD", "ASESMEN MEDIK IGD", "ASESMEN KEPERAWATAN IGD" }));
        cmbJnsTran.setName("cmbJnsTran"); // NOI18N
        cmbJnsTran.setPreferredSize(new java.awt.Dimension(115, 23));
        cmbJnsTran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cmbJnsTranMouseReleased(evt);
            }
        });
        FormInput.add(cmbJnsTran);
        cmbJnsTran.setBounds(152, 150, 290, 23);

        jLabel107.setForeground(new java.awt.Color(0, 0, 0));
        jLabel107.setText("Tgl. Data Dipilih Dari : ");
        jLabel107.setName("jLabel107"); // NOI18N
        FormInput.add(jLabel107);
        jLabel107.setBounds(0, 178, 150, 23);

        tglDari.setEditable(false);
        tglDari.setForeground(new java.awt.Color(0, 0, 0));
        tglDari.setName("tglDari"); // NOI18N
        tglDari.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(tglDari);
        tglDari.setBounds(152, 178, 80, 23);

        jLabel110.setForeground(new java.awt.Color(0, 0, 0));
        jLabel110.setText("Pukul : ");
        jLabel110.setName("jLabel110"); // NOI18N
        FormInput.add(jLabel110);
        jLabel110.setBounds(234, 178, 40, 23);

        pukulDari.setEditable(false);
        pukulDari.setForeground(new java.awt.Color(0, 0, 0));
        pukulDari.setName("pukulDari"); // NOI18N
        pukulDari.setPreferredSize(new java.awt.Dimension(135, 23));
        FormInput.add(pukulDari);
        pukulDari.setBounds(274, 178, 80, 23);

        ChkTglTran.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 250)));
        ChkTglTran.setForeground(new java.awt.Color(0, 0, 0));
        ChkTglTran.setText("Dipilih");
        ChkTglTran.setBorderPainted(true);
        ChkTglTran.setBorderPaintedFlat(true);
        ChkTglTran.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkTglTran.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkTglTran.setName("ChkTglTran"); // NOI18N
        ChkTglTran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkTglTranActionPerformed(evt);
            }
        });
        FormInput.add(ChkTglTran);
        ChkTglTran.setBounds(359, 178, 200, 23);

        BtnRgTujuan.setForeground(new java.awt.Color(0, 0, 0));
        BtnRgTujuan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/home.png"))); // NOI18N
        BtnRgTujuan.setMnemonic('L');
        BtnRgTujuan.setText("Lihat Rg. Rawat Tujuan");
        BtnRgTujuan.setToolTipText("Alt+L");
        BtnRgTujuan.setName("BtnRgTujuan"); // NOI18N
        BtnRgTujuan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnRgTujuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRgTujuanActionPerformed(evt);
            }
        });
        FormInput.add(BtnRgTujuan);
        BtnRgTujuan.setBounds(337, 66, 180, 23);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        internalFrame2.setBorder(null);
        internalFrame2.setName("internalFrame2"); // NOI18N
        internalFrame2.setLayout(new java.awt.GridLayout(1, 2));

        Scroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " [ Data Sesuai No. Rawat Dipilih ] ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbDipilih.setToolTipText("");
        tbDipilih.setName("tbDipilih"); // NOI18N
        tbDipilih.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDipilihMouseClicked(evt);
            }
        });
        tbDipilih.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbDipilihKeyPressed(evt);
            }
        });
        Scroll.setViewportView(tbDipilih);

        internalFrame2.add(Scroll);

        Scroll1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " [ Data Ke No. Rawat Tujuan ] ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        Scroll1.setName("Scroll1"); // NOI18N
        Scroll1.setOpaque(true);

        tbTujuan.setToolTipText("");
        tbTujuan.setName("tbTujuan"); // NOI18N
        Scroll1.setViewportView(tbTujuan);

        internalFrame2.add(Scroll1);

        internalFrame1.add(internalFrame2, java.awt.BorderLayout.CENTER);

        panelGlass8.setName("panelGlass8"); // NOI18N
        panelGlass8.setPreferredSize(new java.awt.Dimension(55, 44));
        panelGlass8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 9, 5));

        BtnCekData.setForeground(new java.awt.Color(0, 0, 0));
        BtnCekData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search.png"))); // NOI18N
        BtnCekData.setMnemonic('C');
        BtnCekData.setText("Cek Data");
        BtnCekData.setToolTipText("Alt+C");
        BtnCekData.setName("BtnCekData"); // NOI18N
        BtnCekData.setPreferredSize(new java.awt.Dimension(120, 30));
        BtnCekData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCekDataActionPerformed(evt);
            }
        });
        panelGlass8.add(BtnCekData);

        BtnProsesData.setForeground(new java.awt.Color(0, 0, 0));
        BtnProsesData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/42a.png"))); // NOI18N
        BtnProsesData.setMnemonic('D');
        BtnProsesData.setText("Diproses");
        BtnProsesData.setToolTipText("Alt+D");
        BtnProsesData.setName("BtnProsesData"); // NOI18N
        BtnProsesData.setPreferredSize(new java.awt.Dimension(120, 30));
        BtnProsesData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnProsesDataActionPerformed(evt);
            }
        });
        panelGlass8.add(BtnProsesData);

        BtnKeluar.setForeground(new java.awt.Color(0, 0, 0));
        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnKeluar);

        internalFrame1.add(panelGlass8, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnProsesDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnProsesDataActionPerformed
        if (TNoRwTujuan.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Nomor rawat tujuan harus terisi dengan benar...!!");
            TNoRwTujuan.requestFocus();
        } else {
            if (cmbJnsTran.isEnabled() == false) {
                if (ChkRMranap.isSelected() == true) {
                    x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin semua rekam medis rawat inap akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        RMranapGantiNoRawat();
                        JOptionPane.showMessageDialog(null, "Proses pemindahan semua data rekam medis Rawat Inap BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
                        emptTeks();
                    }
                }
                
                if (ChkRMigd.isSelected() == true) {
                    x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin semua rekam medis IGD akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        RMigdGantiNoRawat();
                        JOptionPane.showMessageDialog(null, "Proses pemindahan semua data rekam medis IGD BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
                        emptTeks();
                    }
                }

            } else {
                i = 0;
                i = Sequel.cariInteger("select count(billing.no_rawat) cek from billing where billing.no_rawat='" + TNoRwTujuan.getText() + "'");

                if (cmbJnsTran.getSelectedIndex() == 0) {
                    JOptionPane.showMessageDialog(null, "Pilih dulu salah satu jenis transaksi yang akan diproses...!!");
                    cmbJnsTran.requestFocus();
                } else if (i > 0) {
                    JOptionPane.showMessageDialog(null, "Untuk No. Rawat tujuan notanya sudah tersimpan, hapus dulu notanya dibilling pembayaran..!!!");
                } else if (tglDari.getText().equals("salah satu")) {
                    JOptionPane.showMessageDialog(null, "Tgl. Transaksi dan Pukul salah...!!");
                    cmbJnsTran.requestFocus();
                } else {
                    if (cmbJnsTran.getSelectedIndex() == 1) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranFarmasi();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 2) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranRadiologi();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 3) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranLaboratorium();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 4) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranDokter();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 5) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranPetugas();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 6) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranDokterPetugas();
                        }
                    } else if (cmbJnsTran.getSelectedIndex() == 7) {
                        x = JOptionPane.showConfirmDialog(rootPane, "Apakah yakin data " + cmbJnsTran.getSelectedItem().toString() + " akan diproses..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            tranDietGizi();
                        }
                    }
                }
            }
        }
}//GEN-LAST:event_BtnProsesDataActionPerformed

    private void BtnCekDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCekDataActionPerformed
        if (TNoRwTerpilih.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Nomor rawat dipilih harus sudah terisi dengan benar...!!");
            BtnKeluar.requestFocus();
        } else if (TNoRwTujuan.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Nomor rawat tujuan harus terisi dengan benar...!!");
            TNoRwTujuan.requestFocus();
        } else {
            if (cmbJnsTran.getSelectedIndex() == 0) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranKosong();
                tampilTranKosongTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 1) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranFarmasi();
                tampilTranFarmasiTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 2) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranRadiologi();
                tampilTranRadiologiTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 3) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranLaboratorium();
                tampilTranLaboratoriumTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 4) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranDokter();
                tampilTranDokterTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 5) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranPetugas();
                tampilTranPetugasTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 6) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilTranDokterPetugas();
                tampilTranDokterPetugasTujuan();
            } else if (cmbJnsTran.getSelectedIndex() == 7) {
                ChkTglTran.setSelected(false);
                ChkTglTran.setText("Semua Tgl. Transaksi");
                tglDari.setText("");
                pukulDari.setText("");
                tampilDietHarian();
                tampilDietHarianTujuan();
            }
        }
}//GEN-LAST:event_BtnCekDataActionPerformed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
        isForm();
    }//GEN-LAST:event_ChkInputActionPerformed

    private void ChkRMranapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkRMranapActionPerformed
        if (ChkRMranap.isSelected() == true || ChkRMigd.isSelected() == true
            || (ChkRMranap.isSelected() == true && ChkRMigd.isSelected() == true)) {
            cmbJnsTran.setEnabled(false);
            ChkTglTran.setEnabled(false);
            BtnCekData.setEnabled(false);
            cmbJnsTran.setSelectedIndex(0);
            tglDari.setText("");
            pukulDari.setText("");
            ChkTglTran.setSelected(false);
        } else {
            cmbJnsTran.setEnabled(true);
            ChkTglTran.setEnabled(true);
            BtnCekData.setEnabled(true);
        }
    }//GEN-LAST:event_ChkRMranapActionPerformed

    private void ChkRMigdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkRMigdActionPerformed
        if (ChkRMranap.isSelected() == true || ChkRMigd.isSelected() == true
            || (ChkRMranap.isSelected() == true && ChkRMigd.isSelected() == true)) {
            cmbJnsTran.setEnabled(false);
            ChkTglTran.setEnabled(false);
            BtnCekData.setEnabled(false);
            cmbJnsTran.setSelectedIndex(0);
            tglDari.setText("");
            pukulDari.setText("");
            ChkTglTran.setSelected(false);
        } else {
            cmbJnsTran.setEnabled(true);
            ChkTglTran.setEnabled(true);
            BtnCekData.setEnabled(true);
        }
    }//GEN-LAST:event_ChkRMigdActionPerformed

    private void ChkTglTranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkTglTranActionPerformed
        if (ChkTglTran.isSelected() == true) {
            ChkTglTran.setText("Dipilih");
        } else if (ChkTglTran.isSelected() == false) {
            ChkTglTran.setText("Semua Tgl. Transaksi");
            tglDari.setText("");
            pukulDari.setText("");
        }
    }//GEN-LAST:event_ChkTglTranActionPerformed

    private void BtnRgTujuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRgTujuanActionPerformed
        if (TNoRwTerpilih.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nomor rawat terpilih belum ditentukan...!!");
        } else if (TNoRwTujuan.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nomor rawat tujuan harus terisi dengan benar...!!");
            TNoRwTujuan.requestFocus();
        } else {
            TRgRawatTujuan.setText(Sequel.cariIsi("select b.nm_bangsal from kamar_inap ki inner join kamar k on k.kd_kamar=ki.kd_kamar "
                    + "inner join bangsal b on b.kd_bangsal=k.kd_bangsal where ki.no_rawat='" + TNoRwTujuan.getText() + "' order by ki.tgl_masuk desc, ki.jam_masuk desc limit 1"));
        }        
    }//GEN-LAST:event_BtnRgTujuanActionPerformed

    private void TNoRwTujuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TNoRwTujuanKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnRgTujuanActionPerformed(null);
        }
    }//GEN-LAST:event_TNoRwTujuanKeyPressed

    private void cmbJnsTranMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbJnsTranMouseReleased
        AutoCompleteDecorator.decorate(cmbJnsTran);
    }//GEN-LAST:event_cmbJnsTranMouseReleased

    private void tbDipilihMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDipilihMouseClicked
        if (tabMode.getRowCount() != 0) {
            try {
                getdataTran();
            } catch (java.lang.NullPointerException e) {
            }
        }
    }//GEN-LAST:event_tbDipilihMouseClicked

    private void tbDipilihKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbDipilihKeyPressed
        if (tabMode.getRowCount() != 0) {
            if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_UP) || (evt.getKeyCode() == KeyEvent.VK_DOWN)) {
                try {
                    getdataTran();
                } catch (java.lang.NullPointerException e) {
                }
            }
        }
    }//GEN-LAST:event_tbDipilihKeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgPindahDataNomorRawat dialog = new DlgPindahDataNomorRawat(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCekData;
    private widget.Button BtnKeluar;
    private widget.Button BtnProsesData;
    private widget.Button BtnRgTujuan;
    public widget.CekBox ChkInput;
    private widget.CekBox ChkRMigd;
    private widget.CekBox ChkRMranap;
    private widget.CekBox ChkTglTran;
    private widget.PanelBiasa FormInput;
    private javax.swing.JPanel PanelInput;
    private widget.ScrollPane Scroll;
    private widget.ScrollPane Scroll1;
    private widget.TextBox TNoRwTerpilih;
    private widget.TextBox TNoRwTujuan;
    private widget.TextBox TRgRawatTerpilih;
    private widget.TextBox TRgRawatTujuan;
    private widget.ComboBox cmbJnsTran;
    private widget.InternalFrame internalFrame1;
    private widget.InternalFrame internalFrame2;
    private widget.Label jLabel107;
    private widget.Label jLabel108;
    private widget.Label jLabel110;
    private widget.Label jLabel63;
    private widget.Label jLabel64;
    private widget.Label jLabel65;
    private widget.Label jLabel66;
    private widget.Label jLabel67;
    private widget.panelisi panelGlass8;
    private widget.TextBox pasienTerpilih;
    private widget.TextBox pukulDari;
    private widget.Table tbDipilih;
    private widget.Table tbTujuan;
    private widget.TextBox tglDari;
    // End of variables declaration//GEN-END:variables

    public void isForm(){
        if (ChkInput.isSelected() == true) {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 235));
            FormInput.setVisible(true);
            ChkInput.setVisible(true);
        } else if (ChkInput.isSelected() == false) {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 20));
            FormInput.setVisible(false);
            ChkInput.setVisible(true);
        }
    }
    
    private void RMigdGantiNoRawat() {
        Sequel.mengedit("triase_igd", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_medis_igd", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_keperawatan_igdrz", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_keperawatan_igd_resiko", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("transfer_serah_terima_pasien_igd", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pemberian_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pelaksana_pemberian_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_medis_obstetri_ralan", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt_history", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt_konfirmasi_terapi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_tindakan_kedokteran", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("permintaan_lab_raza", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("permintaan_radiologi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_istirahat_sakit", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_keterangan_sakit", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("catatan_resep", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
    }
    
    private void RMranapGantiNoRawat() {
        Sequel.mengedit("catatan_tindakan_keperawatan", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("evaluasi_catatan_tindakan_keperawatan", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("manajemen_catatan_tindakan_keperawatan", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_konsul_unit_ranap", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("asesmen_medik_dewasa_ranap", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("ringkasan_pulang_ranap", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt_history", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("cppt_konfirmasi_terapi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("transfer_serah_terima_pasien_igd", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pemberian_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pelaksana_pemberian_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_tindakan_kedokteran", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("spirometri", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("data_persalinan", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("permintaan_lab_raza", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("permintaan_radiologi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_istirahat_sakit", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("surat_keterangan_sakit", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("catatan_resep_ranap", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_keperawatan_dewasa_ranap", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_keperawatan_dewasa_ranap_resiko", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("penilaian_awal_keperawatan_dewasa_ranap_decubitus", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        
        Sequel.mengedit("pemantauan_harian_obat_perjam", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pemantauan_harian_perjam", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pemantauan_harian_pertanggal", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
        Sequel.mengedit("pemantauan_harian_total_kesamping", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
    }
    
    private void tampilTranKosong() {
        Valid.tabelKosong(tabMode);
        try {
            psKos = koneksi.prepareStatement("SELECT 'pilih dulu' pilih, 'salah satu' salah, 'jenis' jenis, 'transaksi/datanya pada combobox' kombo");

            try {
                rsKos = psKos.executeQuery();
                while (rsKos.next()) {
                    tabMode.addRow(new Object[]{
                        rsKos.getString("pilih"),
                        rsKos.getString("salah"),
                        rsKos.getString("jenis"),
                        rsKos.getString("kombo")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsKos != null) {
                    rsKos.close();
                }
                if (psKos != null) {
                    psKos.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }        
    }
    
    private void tampilTranKosongTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psKos1 = koneksi.prepareStatement("SELECT 'pilih dulu' pilih, 'salah satu' salah, 'jenis' jenis, 'transaksi/datanya pada combobox' kombo");

            try {
                rsKos1 = psKos1.executeQuery();
                while (rsKos1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsKos1.getString("pilih"),
                        rsKos1.getString("salah"),
                        rsKos1.getString("jenis"),
                        rsKos1.getString("kombo")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsKos1 != null) {
                    rsKos1.close();
                }
                if (psKos1 != null) {
                    psKos1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }        
    }
    
    private void tampilTranFarmasi() {
        Valid.tabelKosong(tabMode);
        try {
            psFar = koneksi.prepareStatement("SELECT d.no_rawat, d.tgl_perawatan, d.jam, db.nama_brng FROM detail_pemberian_obat d "
                    + "INNER JOIN databarang db on db.kode_brng=d.kode_brng "
                    + "WHERE d.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY d.tgl_perawatan, d.jam");

            try {
                rsFar = psFar.executeQuery();
                while (rsFar.next()) {
                    tabMode.addRow(new Object[]{
                        rsFar.getString("no_rawat"),
                        rsFar.getString("tgl_perawatan"),
                        rsFar.getString("jam"),
                        rsFar.getString("nama_brng")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsFar != null) {
                    rsFar.close();
                }
                if (psFar != null) {
                    psFar.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranFarmasiTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psFar1 = koneksi.prepareStatement("SELECT d.no_rawat, d.tgl_perawatan, d.jam, db.nama_brng FROM detail_pemberian_obat d "
                    + "INNER JOIN databarang db on db.kode_brng=d.kode_brng "
                    + "WHERE d.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY d.tgl_perawatan, d.jam");

            try {
                rsFar1 = psFar1.executeQuery();
                while (rsFar1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsFar1.getString("no_rawat"),
                        rsFar1.getString("tgl_perawatan"),
                        rsFar1.getString("jam"),
                        rsFar1.getString("nama_brng")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsFar1 != null) {
                    rsFar1.close();
                }
                if (psFar1 != null) {
                    psFar1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranRadiologi() {
        Valid.tabelKosong(tabMode);
        try {
            psRad = koneksi.prepareStatement("SELECT pr.no_rawat, pr.tgl_periksa, pr.jam, j.nm_perawatan FROM periksa_radiologi pr "
                    + "INNER JOIN jns_perawatan_radiologi j on j.kd_jenis_prw=pr.kd_jenis_prw "
                    + "WHERE pr.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY pr.tgl_periksa, pr.jam");

            try {
                rsRad = psRad.executeQuery();
                while (rsRad.next()) {
                    tabMode.addRow(new Object[]{
                        rsRad.getString("no_rawat"),
                        rsRad.getString("tgl_periksa"),
                        rsRad.getString("jam"),
                        rsRad.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsRad != null) {
                    rsRad.close();
                }
                if (psRad != null) {
                    psRad.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranRadiologiTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psRad1 = koneksi.prepareStatement("SELECT pr.no_rawat, pr.tgl_periksa, pr.jam, j.nm_perawatan FROM periksa_radiologi pr "
                    + "INNER JOIN jns_perawatan_radiologi j on j.kd_jenis_prw=pr.kd_jenis_prw "
                    + "WHERE pr.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY pr.tgl_periksa, pr.jam");

            try {
                rsRad1 = psRad1.executeQuery();
                while (rsRad1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsRad1.getString("no_rawat"),
                        rsRad1.getString("tgl_periksa"),
                        rsRad1.getString("jam"),
                        rsRad1.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsRad1 != null) {
                    rsRad1.close();
                }
                if (psRad1 != null) {
                    psRad1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranLaboratorium() {
        Valid.tabelKosong(tabMode);
        try {
            psLab = koneksi.prepareStatement("SELECT pl.no_rawat, pl.tgl_periksa, pl.jam, j.nm_perawatan FROM periksa_lab pl "
                    + "INNER JOIN jns_perawatan_lab j on j.kd_jenis_prw=pl.kd_jenis_prw "
                    + "WHERE pl.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY pl.tgl_periksa, pl.jam");

            try {
                rsLab = psLab.executeQuery();
                while (rsLab.next()) {
                    tabMode.addRow(new Object[]{
                        rsLab.getString("no_rawat"),
                        rsLab.getString("tgl_periksa"),
                        rsLab.getString("jam"),
                        rsLab.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsLab != null) {
                    rsLab.close();
                }
                if (psLab != null) {
                    psLab.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranLaboratoriumTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psLab1 = koneksi.prepareStatement("SELECT pl.no_rawat, pl.tgl_periksa, pl.jam, j.nm_perawatan FROM periksa_lab pl "
                    + "INNER JOIN jns_perawatan_lab j on j.kd_jenis_prw=pl.kd_jenis_prw "
                    + "WHERE pl.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY pl.tgl_periksa, pl.jam");

            try {
                rsLab1 = psLab1.executeQuery();
                while (rsLab1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsLab1.getString("no_rawat"),
                        rsLab1.getString("tgl_periksa"),
                        rsLab1.getString("jam"),
                        rsLab1.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsLab1 != null) {
                    rsLab1.close();
                }
                if (psLab1 != null) {
                    psLab1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranDokter() {
        Valid.tabelKosong(tabMode);
        try {
            psDok = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_dr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsDok = psDok.executeQuery();
                while (rsDok.next()) {
                    tabMode.addRow(new Object[]{
                        rsDok.getString("no_rawat"),
                        rsDok.getString("tgl_perawatan"),
                        rsDok.getString("jam_rawat"),
                        rsDok.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDok != null) {
                    rsDok.close();
                }
                if (psDok != null) {
                    psDok.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranDokterTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psDok1 = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_dr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsDok1 = psDok1.executeQuery();
                while (rsDok1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsDok1.getString("no_rawat"),
                        rsDok1.getString("tgl_perawatan"),
                        rsDok1.getString("jam_rawat"),
                        rsDok1.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDok1 != null) {
                    rsDok1.close();
                }
                if (psDok1 != null) {
                    psDok1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranPetugas() {
        Valid.tabelKosong(tabMode);
        try {
            psPet = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_pr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsPet = psPet.executeQuery();
                while (rsPet.next()) {
                    tabMode.addRow(new Object[]{
                        rsPet.getString("no_rawat"),
                        rsPet.getString("tgl_perawatan"),
                        rsPet.getString("jam_rawat"),
                        rsPet.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsPet != null) {
                    rsPet.close();
                }
                if (psPet != null) {
                    psPet.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranPetugasTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psPet1 = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_pr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsPet1 = psPet1.executeQuery();
                while (rsPet1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsPet1.getString("no_rawat"),
                        rsPet1.getString("tgl_perawatan"),
                        rsPet1.getString("jam_rawat"),
                        rsPet1.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsPet1 != null) {
                    rsPet1.close();
                }
                if (psPet1 != null) {
                    psPet1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranDokterPetugas() {
        Valid.tabelKosong(tabMode);
        try {
            psDP = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_drpr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTerpilih.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsDP = psDP.executeQuery();
                while (rsDP.next()) {
                    tabMode.addRow(new Object[]{
                        rsDP.getString("no_rawat"),
                        rsDP.getString("tgl_perawatan"),
                        rsDP.getString("jam_rawat"),
                        rsDP.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDP != null) {
                    rsDP.close();
                }
                if (psDP != null) {
                    psDP.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilTranDokterPetugasTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psDP1 = koneksi.prepareStatement("SELECT ri.no_rawat, ri.tgl_perawatan, ri.jam_rawat, ji.nm_perawatan FROM rawat_inap_drpr ri "
                    + "INNER JOIN jns_perawatan_inap ji ON ji.kd_jenis_prw=ri.kd_jenis_prw "
                    + "WHERE ri.no_rawat='" + TNoRwTujuan.getText() + "' ORDER BY ri.tgl_perawatan, ri.jam_rawat");

            try {
                rsDP1 = psDP1.executeQuery();
                while (rsDP1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsDP1.getString("no_rawat"),
                        rsDP1.getString("tgl_perawatan"),
                        rsDP1.getString("jam_rawat"),
                        rsDP1.getString("nm_perawatan")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDP1 != null) {
                    rsDP1.close();
                }
                if (psDP1 != null) {
                    psDP1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilDietHarian() {
        Valid.tabelKosong(tabMode);
        try {
            psDH = koneksi.prepareStatement("select dd.no_rawat, dd.tanggal, TIME(dd.waktu_simpan) jam, concat(d.nama_diet,', Diet : ',dd.waktu) diet "
                    + "from detail_beri_diet dd inner join diet d on d.kd_diet=dd.kd_diet "
                    + "where dd.no_rawat ='" + TNoRwTerpilih.getText() + "' order by dd.tanggal, d.nama_diet");

            try {
                rsDH = psDH.executeQuery();
                while (rsDH.next()) {
                    tabMode.addRow(new Object[]{
                        rsDH.getString("no_rawat"),
                        rsDH.getString("tanggal"),
                        rsDH.getString("jam"),
                        rsDH.getString("diet")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDH != null) {
                    rsDH.close();
                }
                if (psDH != null) {
                    psDH.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    private void tampilDietHarianTujuan() {
        Valid.tabelKosong(tabMode1);
        try {
            psDH1 = koneksi.prepareStatement("select dd.no_rawat, dd.tanggal, TIME(dd.waktu_simpan) jam, concat(d.nama_diet,', Diet : ',dd.waktu) diet "
                    + "from detail_beri_diet dd inner join diet d on d.kd_diet=dd.kd_diet "
                    + "where dd.no_rawat ='" + TNoRwTujuan.getText() + "' order by dd.tanggal, d.nama_diet");

            try {
                rsDH1 = psDH1.executeQuery();
                while (rsDH1.next()) {
                    tabMode1.addRow(new Object[]{
                        rsDH1.getString("no_rawat"),
                        rsDH1.getString("tanggal"),
                        rsDH1.getString("jam"),
                        rsDH1.getString("diet")
                    });
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (rsDH1 != null) {
                    rsDH1.close();
                }
                if (psDH1 != null) {
                    psDH1.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notifikasi : " + e);
        }
    }
    
    public void emptTeks() {
        ChkTglTran.setSelected(false);
        ChkTglTran.setText("Semua Tgl. Transaksi");        
        cmbJnsTran.setSelectedIndex(0);
        tglDari.setText("");
        pukulDari.setText("");
        ChkRMranap.setSelected(false);
        ChkRMigd.setSelected(false);
        tampilTranKosong();
        tampilTranKosongTujuan();
    }
    
    private void tranFarmasi() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("detail_pemberian_obat", "tgl_perawatan = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("detail_pemberian_obat", "tgl_perawatan > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("resep_obat", "tgl_perawatan = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("resep_obat", "tgl_perawatan > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("riwayat_obat_pasien", "tanggal = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("riwayat_obat_pasien", "tanggal > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi farmasi BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranFarmasi();
            tampilTranFarmasiTujuan();
            emptTeks();
        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("detail_pemberian_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("resep_obat", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("riwayat_obat_pasien", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            
            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi farmasi BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranFarmasi();
            tampilTranFarmasiTujuan();
            emptTeks();
        } else {
            JOptionPane.showMessageDialog(null, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranRadiologi() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("periksa_radiologi", "tgl_periksa = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("periksa_radiologi", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("beri_bhp_radiologi", "tgl_periksa = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("beri_bhp_radiologi", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("hasil_radiologi", "tgl_periksa = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("hasil_radiologi", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi pemeriksaan radiologi BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranRadiologi();
            tampilTranRadiologiTujuan();
            emptTeks();

        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("periksa_radiologi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("beri_bhp_radiologi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("hasil_radiologi", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            
            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi pemeriksaan radiologi BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranRadiologi();
            tampilTranRadiologiTujuan();
            emptTeks();
        } else {
            JOptionPane.showMessageDialog(null, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranLaboratorium() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("periksa_lab", "tgl_periksa = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("periksa_lab", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("detail_periksa_lab", "tgl_periksa = '" + tglDari.getText() + "' and jam >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("detail_periksa_lab", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            Sequel.mengedit("lis_reg", "tgl_periksa = '" + tglDari.getText() + "' and jam_periksa >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("lis_reg", "tgl_periksa > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi pemeriksaan laboratorium BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranLaboratorium();
            tampilTranLaboratoriumTujuan();
            emptTeks();
        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("periksa_lab", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("detail_periksa_lab", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("lis_reg", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            
            JOptionPane.showMessageDialog(null, "Proses pemindahan data transaksi pemeriksaan laboratorium BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranLaboratorium();
            tampilTranLaboratoriumTujuan();
            emptTeks();
        } else {
            JOptionPane.showMessageDialog(null, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranDokter() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_dr", "tgl_perawatan = '" + tglDari.getText() + "' and jam_rawat >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("rawat_inap_dr", "tgl_perawatan > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan dokter BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranDokter();
            tampilTranDokterTujuan();
            emptTeks();
            
        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_dr", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");            
            
            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan dokter BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranDokter();
            tampilTranDokterTujuan();
            emptTeks();
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranPetugas() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_pr", "tgl_perawatan = '" + tglDari.getText() + "' and jam_rawat >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("rawat_inap_pr", "tgl_perawatan > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan petugas BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranPetugas();
            tampilTranPetugasTujuan();
            emptTeks();

        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_pr", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan petugas BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranPetugas();
            tampilTranPetugasTujuan();
            emptTeks();

        } else {
            JOptionPane.showMessageDialog(rootPane, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranDokterPetugas() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_drpr", "tgl_perawatan = '" + tglDari.getText() + "' and jam_rawat >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("rawat_inap_drpr", "tgl_perawatan > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan dokter & petugas BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranDokterPetugas();
            tampilTranDokterPetugasTujuan();
            emptTeks();

        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("rawat_inap_drpr", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data transaksi penanganan dokter & petugas BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilTranDokterPetugas();
            tampilTranDokterPetugasTujuan();
            emptTeks();

        } else {
            JOptionPane.showMessageDialog(rootPane, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    private void tranDietGizi() {
        if (ChkTglTran.isSelected() == true && !tglDari.getText().equals("")) {
            Sequel.mengedit("detail_beri_diet", "tanggal = '" + tglDari.getText() + "' and TIME(waktu_simpan) >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("detail_beri_diet", "tanggal > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            
            Sequel.mengedit("diet_ranap_daftar_rincian", "tanggal = '" + tglDari.getText() + "' and TIME(waktu_simpan) >='" + pukulDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("diet_ranap_daftar_rincian", "tanggal > '" + tglDari.getText() + "' "
                    + "and no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data diet harian BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilDietHarian();
            tampilDietHarianTujuan();
            emptTeks();

        } else if (ChkTglTran.isSelected() == false && tglDari.getText().equals("")) {
            Sequel.mengedit("detail_beri_diet", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");
            Sequel.mengedit("diet_ranap_daftar_rincian", "no_rawat='" + TNoRwTerpilih.getText() + "'", "no_rawat='" + TNoRwTujuan.getText() + "'");

            JOptionPane.showMessageDialog(rootPane, "Proses pemindahan data diet harian BERHASIL dilakukan ke no. rawat " + TNoRwTujuan.getText() + "...!!");
            tampilDietHarian();
            tampilDietHarianTujuan();
            emptTeks();

        } else {
            JOptionPane.showMessageDialog(rootPane, "Menentukan tgl. transaksi & jamnya tidak Valid...!!");
            ChkTglTran.requestFocus();
        }
    }
    
    public void setData(String norwPilih, String rgrawat) {
        TNoRwTerpilih.setText(norwPilih);
        pasienTerpilih.setText(Sequel.cariIsi("select concat(p.no_rkm_medis,' - ',p.nm_pasien) from reg_periksa rp "
                + "inner join pasien p on p.no_rkm_medis=rp.no_rkm_medis where rp.no_rawat='" + norwPilih + "'"));
        TRgRawatTerpilih.setText(rgrawat);
    }
    
    private void getdataTran() {
        if (tbDipilih.getSelectedRow() != -1) {
            tglDari.setText(tbDipilih.getValueAt(tbDipilih.getSelectedRow(), 1).toString());
            pukulDari.setText(tbDipilih.getValueAt(tbDipilih.getSelectedRow(), 2).toString());
            ChkTglTran.setSelected(true);
            ChkTglTran.setText("Dipilih");
        }
    }
}
